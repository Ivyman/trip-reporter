{"version":3,"sources":["store/countries/types.ts","hooks/dispatch.ts","config.ts","store/trips/types.ts","store/countries/actions.ts","store/countries/effects.ts","utils/storage.ts","store/trips/effects.ts","store/app/types.ts","store/trips/actions.ts","store/app/selectors.ts","store/trips/selectors.ts","store/alerts/types.ts","store/app/actions.ts","types/common.ts","store/alerts/actions.ts","store/filters/types.ts","utils/dates.ts","components/DetailsModal/styles.ts","components/CountryBadge/styles.ts","components/CountryBadge/index.ts","components/CountryBadge/CountryBadge.tsx","utils/common.ts","components/DetailsModal/index.ts","components/DetailsModal/DetailsModal.tsx","components/FormModal/styles.ts","utils/friends.ts","store/countries/selectors.ts","containers/Form/index.ts","containers/Form/Form.tsx","components/FormModal/index.ts","components/FormModal/FormModal.tsx","containers/MasterModal/index.ts","containers/MasterModal/MasterModal.tsx","store/filters/selectors.ts","components/TripItem/styles.ts","components/TripItem/index.ts","components/TripItem/TripItem.tsx","containers/TripList/index.ts","containers/TripList/TripList.tsx","store/filters/actions.ts","containers/Filters/index.ts","containers/Filters/Filters.tsx","containers/Panel/index.ts","containers/Panel/Panel.tsx","store/alerts/selectors.ts","containers/Snacksbar/Snacksbar.tsx","containers/Snacksbar/index.ts","containers/App/index.ts","containers/App/App.tsx","store/app/index.ts","store/trips/index.ts","store/alerts/index.ts","store/filters/index.ts","store/countries/index.ts","store/index.ts","index.tsx"],"names":["CountriesTypes","useDispatch","action","dispatch","useDispatchRedux","useCallback","payload","COMMON","RESOURCES","COUNTRIES","URL","HEADERS","AVATAR","TripsTypes","fetchCountries","a","async","isFetching","axios","get","headers","dataList","data","countriesList","map","country","id","uuid","name","code","alpha2Code","fetchCountriesSuccess","fetchCountriesError","console","error","type","COUNTRIES_FETCHING","COUNTRIES_FETCH_SUCCESS","COUNTRIES_FETCH_ERROR","getState","stateName","localStorage","serializedState","getItem","JSON","parse","removeState","removeItem","addTrip","trip","storeState","existingData","Maybe","of","state","unwrapOr","stringify","setItem","setStateItem","addTrips","trips","length","setState","AppTypes","fetchTrips","addTripsSuccess","tripError","tripData","effects","addTripSuccess","tripsData","TRIPS_ADD_LIST","editTrip","withEditedItem","filterdTrips","filter","item","TRIPS_ADD","removeTrip","tripId","removeTripSuccess","TRIPS_REMOVE","setActiveTrip","TRIPS_SET_ACTIVE","TRIPS_ERROR","getShowModal","app","showModal","getTripsList","tripsList","getActiveTrip","active","getActiveTripData","createSelector","list","find","AlertTypes","setShowModal","modalState","APP_TRIGGER_MODAL","ModalTypes","setShowAlert","alertPayload","ALERT_SHOW","setHideAlert","ALERT_HIDE","FiltersTypes","getTodayDate","Date","convertTimeStamp","stamp","format","useStyles","makeStyles","theme","createStyles","root","boxShadow","shadows","maxWidth","width","outline","position","marginTop","spacing","marginBottom","content","padding","title","textTransform","margin","footer","display","justifyContent","alignItems","popover","editIcon","marginRight","color","palette","primary","main","deleteIcon","secondary","dark","divider","flexGrow","marginLeft","border","grey","chipWrapper","cursor","avatarImage","height","CountryBadge","memo","countryData","onClick","isTransited","tagProps","classes","renderChip","Chip","label","variant","avatar","Avatar","src","alt","img","className","event","DetailsModal","onCloseModal","onEditTrip","onDeleteTrip","activeTripData","React","useState","anchorEl","setAnchorEl","open","Boolean","handleEditClick","handleDeleteClick","tripName","handleOpenPopover","currentTarget","handleClosePopover","isCountryTransited","transited","indexOf","Card","CardContent","Box","mb","Typography","component","icon","QueryBuilder","started","finished","duration","my","description","visitedCountries","transitedCountries","mt","Divider","key","mr","friends","friend","avatarUrl","Button","size","IconButton","MoreVert","Popover","onClose","anchorOrigin","vertical","horizontal","transformOrigin","List","ListItem","button","Edit","Delete","saveButton","backgroundColor","green","Friends","getCountriesList","countries","Form","onFormValid","saveForm","initialData","useSelector","dispatchAddTrip","dispatchEditTrip","dispatchShowAlert","loadingFriendId","setLoadingFriendId","transitedCountriesId","setTransitedCountriesId","chosenCountries","setChosenCountries","friendsList","setFriendsList","tripNameValue","setTripNameValue","startedDateValue","setStartedDateValue","finishedDateValue","setFinishedDateValue","descriptionValue","setDescriptionValue","isFormValid","getDate","handleAddFriend","newFriend","uuId","Math","floor","random","getRandomFriend","handleDeleteFriend","handleTransitedTrigger","stopPropagation","filteredId","handleTextFieldChange","target","value","handleChangeStartedDate","date","handleChangeFinishedDate","handleChangeChosenCountries","useEffect","getTime","startedDate","finishedDate","round","abs","showAlert","ALERT_SHOWN","message","utils","DateFnsUtils","Grid","container","xs","TextField","fullWidth","fontWeight","onChange","Autocomplete","multiple","options","getOptionLabel","option","renderTags","getTagProps","index","renderInput","params","sm","DatePicker","disableToolbar","inputVariant","minDate","multiline","rows","Fab","disabled","CircularProgress","Add","fontSize","onLoad","onDelete","FormModal","editModalData","setIsFormValid","hasSaveForm","setHasSaveForm","isEditModalType","handleSave","MasterModal","activeTripId","dispatchModal","dispatchRemoveTrip","dispatchActiveTrip","handleClose","handleEdit","MODAL_EDIT","handleDelete","NONE","Modal","style","overflowY","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","MODAL_DETAILS","MODAL_ADD","getFilters","filters","transition","transform","background","paddingTop","paddingBottom","paddingLeft","paddingRight","chipTick","TripItem","text","isTransitedCountry","countryId","includes","split","slice","join","TripList","filtersData","filteredTrips","setFilteredTrips","handleTripClick","toLocaleLowerCase","queryString","direction","align","setFilters","FILTERS_SET","Filters","dispatchFilters","setQueryString","Panel","triggerModal","getAlertState","alerts","Transition","forwardRef","props","ref","Slide","Snacksbar","alertState","dispatchHideAlert","isOpen","useMemo","setTimeout","Snackbar","TransitionComponent","App","dispatchCountries","dispatchTrips","py","CssBaseline","AppBar","Toolbar","Container","initialState","hasError","AT","fetching","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"uKAAKA,E,kDCGQC,EAAc,SAAqBC,GAC5C,IAAMC,EAAWC,cAEjB,OAAOC,uBACH,SAACC,GACGH,EAASG,EAAUJ,EAAOI,GAAWJ,OAEzC,CAACC,EAAUD,K,mDCVNK,EACmB,GADnBA,EAEM,GAFNA,EAGI,aAHJA,EAIQ,QAGRC,EAAY,CACrBC,UAAW,CACPC,IAAK,8CACLC,QAAS,CACL,kBAAmB,kCACnB,iBAAkB,uDAG1BC,OAAQ,iC,SFfPZ,K,wCAAAA,E,kDAAAA,E,+CAAAA,M,KAMUA,IGNVa,EHMUb,IICFc,EAAiB,kBAAM,SAAOX,GAAP,mBAAAY,EAAAC,OAAA,gEAE5Bb,EAASc,KAFmB,WAAAF,EAAA,MCHN,EAAAA,EAAAC,OAAA,kEAAAD,EAAA,MACpBG,IAAMC,IAAIX,EAAUC,UAAUC,IAAK,CAAEU,QAASZ,EAAUC,UAAUE,WAD9C,8EDGM,gBAIdU,EAJc,EAIpBC,KACFC,EAA4BF,EAASG,KAAI,SAACC,GAAD,MAAkC,CAC7EC,GAAIC,MACJC,KAAMH,EAAQG,KACdC,KAAMJ,EAAQK,eAGlB3B,EAAS4B,EAAsBR,IAXH,kDAa5BpB,EAAS6B,KACTC,QAAQC,MAAR,MAd4B,2DAkBvBjB,EAAa,iBAAO,CAAEkB,KAAMnC,EAAeoC,qBAE3CL,EAAwB,SAACR,GAAD,MAAiD,CAClFY,KAAMnC,EAAeqC,wBACrB/B,QAASiB,IAGAS,EAAsB,iBAAwB,CACvDG,KAAMnC,EAAesC,wB,wBEUZC,EAAW,SAAIC,GACxB,GAAKC,aAIL,IACI,IAAMC,EAAkBD,aAAaE,QAAQH,GAE7C,OAAOI,KAAKC,MAAMH,GAAoC,MACxD,MAAOR,GAEL,YADAD,QAAQC,MAAM,kCAKTY,EAAc,SAACN,GACxB,IAAKC,aACD,OAAO,EAGX,IAEI,OADAA,aAAaM,WAAWP,IACjB,EACT,MAAON,GAEL,OADAD,QAAQC,MAAM,6BACP,IChEFc,EAAU,SAACC,GAAD,ODFK,SAAIrB,EAAcsB,GAC1C,IAAKT,aACD,OAAO,EAGX,IACI,IAAMU,EAAeC,IAAMC,GAAQd,EAAYX,IAC1CJ,KAAI,SAAC8B,GAAD,OAAgBA,KACpBC,SAAS,IAERb,EAAkBE,KAAKY,UAAL,CAAgBN,GAAhB,mBAA+BC,KAGvD,OADAV,aAAagB,QAAQ7B,EAAMc,IACpB,EACT,MAAOR,GAEL,OADAD,QAAQC,MAAM,+BACP,GCdkCwB,CAAoBnD,EAAwB0C,IAEhFU,EAAW,SAACC,GAAD,ODgBA,SAAIhC,EAAcsB,GACtC,IAAKT,aACD,OAAO,EAGX,IACI,GAAIS,EAAWW,OAAQ,CACnB,IAAMnB,EAAkBE,KAAKY,UAAUN,GAEvCT,aAAagB,QAAQ7B,EAAMc,QAE3BI,EAAYlB,GAGhB,OAAO,EACT,MAAOM,GAEL,OADAD,QAAQC,MAAM,+BACP,GCjCsC4B,CAAgBvD,EAAwBqD,K,SJNxF/C,K,sBAAAA,E,4BAAAA,E,gCAAAA,E,oCAAAA,E,2BAAAA,M,KAQUA,IKRVkD,ELQUlD,IMDFmD,EAAa,kBAAM,SAAC7D,GAC7B,IAAMyD,EFkB2CrB,EAAgBhC,GEhBjEJ,EAASyD,EAAQK,EAAgBL,GAASM,OAGjClB,EAAU,SAACC,GAAD,OAAgC,SAAC9C,GACpD,IAAMgE,EAAQ,aAAKzC,GAAIC,OAAWsB,GAGlC9C,EAFgBiE,EAAgBD,GAEbE,EAAeF,GAAYD,OAGrCD,EAAkB,SAACK,GAAD,MAAsC,CACjEnC,KAAMtB,EAAW0D,eACjBjE,QAASgE,IAGAE,EAAW,SAACvB,GAAD,OAAiB,SAAC9C,GACtC,IAAMsE,EFZc,SAACxB,GACrB,IAAIW,EAAQrB,EAAgBhC,GAE5B,GAAIqD,EAAO,CACP,IAAMc,EAAed,EAAMe,QAAO,SAACC,GAAD,OAAiBA,EAAKlD,KAAOuB,EAAKvB,MACpEkC,EAAK,CAAIX,GAAJ,mBAAayB,IAElBf,EAASC,GAEb,OAAOA,EEGgBQ,CAAiBnB,GAExC9C,EAASsE,EAAiBR,EAAgBQ,GAAkBP,OAGnDG,EAAiB,SAACF,GAAD,MAAmC,CAC7DhC,KAAMtB,EAAWgE,UACjBvE,QAAS6D,IAGAW,EAAa,SAACC,GAAD,OAAoB,SAAC5E,GAG3CA,EF/BsB,SAAC4E,GACvB,IAAMnB,EAAQrB,EAAgBhC,GAE9B,QAAOqD,GAAQD,EAASC,EAAMe,QAAO,SAAA1B,GAAI,OAAIA,EAAKvB,KAAOqD,ME0BvCX,CAAmBW,GAEhBC,EAAkBD,GAAUb,OAGxCc,EAAoB,SAACD,GAAD,MAAkC,CAC/D5C,KAAMtB,EAAWoE,aACjB3E,QAASyE,IAGAG,EAAgB,SAACH,GAAD,MAAkC,CAC3D5C,KAAMtB,EAAWsE,iBACjB7E,QAASyE,IAGAb,EAAY,iBAAoB,CACzC/B,KAAMtB,EAAWuE,c,oCClDRC,EAAe,SAAC/B,GAAD,OAAkCA,EAAMgC,IAAIC,W,QCC3DC,EAAe,SAAClC,GAAD,OAA+BA,EAAMM,MAAM6B,WAE1DC,EAAgB,SAACpC,GAAD,OAA8BA,EAAMM,MAAM+B,QAE1DC,GAAoBC,YAC7BL,EACAE,GACA,SAACI,EAAepE,GAAhB,OAAsCoE,EAAKC,MAAK,SAACnB,GAAD,OAAiBA,EAAKlD,KAAOA,S,SHX5EqC,K,uCAAAA,M,KAIUA,IIJViC,GJIUjC,KKCFkC,GAAe,SAACC,GAAD,MAAwC,CAChE/D,KAAM4B,GAASoC,kBACf7F,QAAS8C,IAAMC,GAAG6C,M,SDPjBF,K,wBAAAA,E,yBAAAA,Q,KAKUA,IELHI,GAOAJ,GFFGA,MGFFK,GAAe,SAACC,GAAD,MAA+C,CACvEnE,KAAM6D,GAAWO,WACjBjG,QAASgG,IAGAE,GAAe,iBAAqB,CAAErE,KAAM6D,GAAWS,c,SDRxDL,K,sBAAAA,E,wBAAAA,E,8BAAAA,E,aAAAA,Q,cAOAJ,K,0BAAAA,E,aAAAA,Q,SEPPU,G,gDCGQC,GAAe,kBAAY,IAAIC,MAQ/BC,GAAmB,SAACC,GAAD,OAAoCC,aAAO,IAAIH,KAAKE,GAAQvG,I,oBC4C7EyG,GArDGC,cAAW,SAACC,GAAD,OACzBC,aAAa,CACTC,KAAM,CACFC,UAAWH,EAAMI,QAAQ,GACzBC,SAAU,OACVC,MAAO,SACPC,QAAS,OACTC,SAAU,WACVC,UAAWT,EAAMU,QAAQ,GACzBC,aAAcX,EAAMU,QAAQ,IAEhCE,QAAS,CACL,kBAAmB,CACfC,QAASb,EAAMU,QAAQ,KAG/BI,MAAO,CACHC,cAAe,YACfC,OAAQhB,EAAMU,QAAQ,EAAG,IAE7BO,OAAQ,CACJ,kBAAmB,CACfJ,QAASb,EAAMU,QAAQ,EAAG,IAE9BQ,QAAS,OACTC,eAAgB,gBAChBC,WAAY,UAEhBC,QAAS,CACLR,QAASb,EAAMU,QAAQ,IAE3BY,SAAU,CACN,UAAW,CACPC,YAAavB,EAAMU,QAAQ,IAE/Bc,MAAOxB,EAAMyB,QAAQC,QAAQC,MAEjCC,WAAY,CACR,UAAW,CACPL,YAAavB,EAAMU,QAAQ,IAE/Bc,MAAOxB,EAAMyB,QAAQI,UAAUC,MAEnCP,YAAa,CACTA,YAAavB,EAAMU,QAAQ,IAE/BqB,QAAS,CACLC,SAAU,EACVC,WAAYjC,EAAMU,QAAQ,S,sJChCvBZ,GAhBGC,cAAW,SAACC,GAAD,OACzBC,aAAa,CACTC,KAAM,CACFgC,OAAO,aAAD,OAAelC,EAAMyB,QAAQU,KAAK,OAE5CC,YAAa,CACT,oBAAqB,CACjBC,OAAQ,YAGhBC,YAAa,CACTC,OAAQ,aCXLC,GCYuBC,gBAAK,YAAsD,IAAnDC,EAAkD,EAAlDA,YAAaC,EAAqC,EAArCA,QAASC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SACvEC,EAAUhD,KAEViD,EAAa,kBACf,kBAACC,GAAA,EAAD,eACIC,MAAOL,EAAcF,EAAYhI,KAAO,gCAASgI,EAAYhI,MAC7DwI,QAASN,EAAc,WAAa,UACpCE,QAAS,CAAE5C,KAAM4C,EAAQ5C,MACzBiD,OACI,kBAACC,GAAA,EAAD,CACIC,KCtBa1I,EDsBS+H,EAAY/H,KCtBtB,sCAAyDA,EAAzD,iBDuBZ2I,IAAKZ,EAAYhI,KACjBoI,QAAS,CAAES,IAAKT,EAAQR,gBAG5BO,IC3BgB,IAAClI,GD+B7B,OACI,oCACKgI,EACG,0BAAMa,UAAWV,EAAQV,YAAaO,QAAS,SAACc,GAAD,OAAuBd,EAAQD,EAAYlI,GAAIiJ,KACzFV,KAGLA,QEtCDW,GCmCuBjB,gBAAK,YAAiE,IAA9DkB,EAA6D,EAA7DA,aAAcC,EAA+C,EAA/CA,WAAYC,EAAmC,EAAnCA,aAAcC,EAAqB,EAArBA,eAAqB,EACvEC,IAAMC,SAAmC,MAD8B,oBAChGC,EADgG,KACtFC,EADsF,KAEjGC,EAAOC,QAAQH,GAEfnB,EAAUhD,KAEVuE,EAAkBlL,uBAAY,WAChCyK,IACAM,EAAY,QACb,CAACN,EAAYM,IAEVI,EAAoBnL,uBACtB,SAACoL,GACGV,EAAaU,GACbL,EAAY,QAEhB,CAACL,EAAcK,IAGbM,EAAoBrL,uBACtB,SAACsK,GACGS,EAAYT,EAAMgB,iBAEtB,CAACP,IAECQ,EAAqBvL,uBAAY,WACnC+K,EAAY,QACb,CAACA,IAEES,EAAqB,SAACC,EAAqBpK,GAAtB,OAAqCoK,EAAUC,QAAQrK,IAAO,GAGzF,OACI,kBAACsK,GAAA,EAAD,CAAMtB,UAAWV,EAAQ5C,MACpBhE,IAAMC,GAAU2H,GACZxJ,KAAI,SAACF,GAAD,OACD,oCACI,kBAAC2K,GAAA,EAAD,CAAavB,UAAWV,EAAQlC,SAC5B,kBAACoE,EAAA,EAAD,CAAK9D,QAAQ,OAAO+D,GAAI,GACpB,kBAACC,GAAA,EAAD,CAAYhC,QAAQ,KAAKiC,UAAU,KAAK3B,UAAWV,EAAQhC,OACtD1G,EAAKM,OAId,kBAACsK,EAAA,EAAD,CAAKC,GAAI,EAAG/D,QAAQ,OAAOE,WAAW,SAASD,eAAe,iBAC1D,kBAAC6B,GAAA,EAAD,CACIQ,UAAWV,EAAQvB,YACnB6D,KAAM,kBAACC,GAAA,EAAD,MACNpC,MACI,oCACI,gCAAStD,GAAiBvF,EAAKkL,UAC/B,2CACA,gCAAS3F,GAAiBvF,EAAKmL,YAGvCrC,QAAQ,aAEZ,kBAACgC,GAAA,EAAD,CAAYhC,QAAQ,QAAQiC,UAAU,KAClC,6CADJ,KA3BLK,EA4BmDpL,EAAKoL,SA5BlC,UAAkBA,EAAlBA,EAAW,EAAX,mBAgCrB,kBAACR,EAAA,EAAD,CAAKS,GAAI,GACL,kBAACP,GAAA,EAAD,CAAYhC,QAAQ,QAAQiC,UAAU,KACjC/K,EAAKsL,cAIbtL,EAAKuL,iBAAiBhJ,OAASvC,EAAKwL,mBAAmBjJ,QACpD,kBAACqI,EAAA,EAAD,CAAKa,GAAI,GACL,kBAACb,EAAA,EAAD,CAAK9D,QAAQ,OAAOE,WAAW,SAAS6D,GAAI,GACxC,kBAACC,GAAA,EAAD,CAAYhC,QAAQ,KAAKiC,UAAU,MAAnC,qBAGA,kBAACW,GAAA,EAAD,CAAStC,UAAWV,EAAQf,WAG/B3H,EAAKuL,iBAAiBrL,KAAI,SAACC,GAAD,OACvB,kBAAC,WAAD,CAAUwL,IAAKxL,EAAQC,KACjBmK,EAAmBvK,EAAKwL,mBAAoBrL,EAAQC,KAClD,kBAACwK,EAAA,EAAD,CAAK9D,QAAQ,eAAe8E,GAAI,EAAGf,GAAI,GACnC,kBAAC,GAAD,CAAcvC,YAAanI,EAASqI,aAAa,YAQtExI,EAAKwL,mBAAmBjJ,QACvB,kBAACqI,EAAA,EAAD,CAAKa,GAAI,GACL,kBAACb,EAAA,EAAD,CAAK9D,QAAQ,OAAOE,WAAW,SAAS6D,GAAI,GACxC,kBAACC,GAAA,EAAD,CAAYhC,QAAQ,KAAKiC,UAAU,MAAnC,uBAGA,kBAACW,GAAA,EAAD,CAAStC,UAAWV,EAAQf,WAG/B3H,EAAKuL,iBAAiBrL,KAAI,SAACC,GAAD,OACvB,kBAAC,WAAD,CAAUwL,IAAKxL,EAAQC,IAClBmK,EAAmBvK,EAAKwL,mBAAoBrL,EAAQC,KACjD,kBAACwK,EAAA,EAAD,CAAK9D,QAAQ,eAAe8E,GAAI,EAAGf,GAAI,GACnC,kBAAC,GAAD,CAAcvC,YAAanI,EAASqI,aAAa,YAQtExI,EAAK6L,QAAQtJ,QACZ,kBAACqI,EAAA,EAAD,CAAKa,GAAI,GACL,kBAACb,EAAA,EAAD,CAAK9D,QAAQ,OAAOE,WAAW,SAAS6D,GAAI,GACxC,kBAACC,GAAA,EAAD,CAAYhC,QAAQ,KAAKiC,UAAU,MAAnC,gBAGA,kBAACW,GAAA,EAAD,CAAStC,UAAWV,EAAQf,WAG/B3H,EAAK6L,QAAQ3L,KAAI,SAAC4L,GAAD,OACd,kBAAClB,EAAA,EAAD,CAAK9D,QAAQ,eAAe8E,GAAI,EAAGf,GAAI,EAAGc,IAAKG,EAAO1L,IAClD,kBAACwI,GAAA,EAAD,CACIG,OAAQ,kBAACC,GAAA,EAAD,CAAQE,IAAK4C,EAAOxL,KAAM2I,IAAK6C,EAAOC,YAC9ClD,MAAOiD,EAAOxL,aAOtC,kBAACoL,GAAA,EAAD,MACA,kBAACf,GAAA,EAAD,CAAavB,UAAWV,EAAQ7B,QAC5B,kBAACmF,GAAA,EAAD,CAAQlD,QAAQ,WAAWP,QAASgB,EAAc0C,KAAK,SAAvD,SAGA,kBAACC,GAAA,EAAD,CAAY9E,MAAM,UAAUmB,QAAS6B,GACjC,kBAAC+B,GAAA,EAAD,OAEJ,kBAACC,GAAA,EAAD,CACIrC,KAAMA,EACNF,SAAUA,EACVwC,QAAS/B,EACTgC,aAAc,CACVC,SAAU,SACVC,WAAY,SAEhBpD,UAAWV,EAAQzB,QACnBwF,gBAAiB,CACbF,SAAU,MACVC,WAAY,UAGhB,kBAACE,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAUC,QAAM,EAACxD,UAAWV,EAAQxB,SAAUqB,QAAS0B,GACnD,kBAAC4C,GAAA,EAAD,MADJ,SAGA,kBAACF,GAAA,EAAD,CACIC,QAAM,EACNxD,UAAWV,EAAQlB,WACnBe,QAAS,kBAAM2B,EAAkBlK,EAAKM,QAEtC,kBAACwM,GAAA,EAAD,MALJ,eA9HV,IAAC1B,KA0IVnJ,SACG,kBAAC6I,GAAA,EAAD,CAAYhC,QAAQ,KAAKiC,UAAU,KAAK3B,UAAWV,EAAQhC,OAA3D,qB,UCrKLhB,GAtCGC,cAAW,SAACC,GAAD,OACzBC,aAAa,CACTC,KAAM,CACFC,UAAWH,EAAMI,QAAQ,GACzBC,SAAU,OACVC,MAAO,SACPC,QAAS,OACTC,SAAU,WACVC,UAAWT,EAAMU,QAAQ,GACzBC,aAAcX,EAAMU,QAAQ,IAEhCI,MAAO,CACHC,cAAe,YACfC,OAAQhB,EAAMU,QAAQ,EAAG,IAE7BE,QAAS,CACL,kBAAmB,CACfC,QAASb,EAAMU,QAAQ,KAG/ByG,WAAY,CACRC,gBAAiBC,KAAM,KACvB7F,MAAO,QACP,UAAW,CACP4F,gBAAiBC,KAAM,OAG/BpG,OAAQ,CACJ,kBAAmB,CACfJ,QAASb,EAAMU,QAAQ,EAAG,IAE9BQ,QAAS,OACTC,eAAgB,gBAChBC,WAAY,e,UChCXkG,GAAU,CACnB,gBACA,eACA,gBACA,eACA,cACA,cACA,cACA,iBACA,iBACA,eCXSC,GAAmB,SAACnL,GAAD,OAAkCA,EAAMoL,UAAUnN,e,+ECDnEoN,GCyBe,SAAC,GAAqD,IAAnDC,EAAkD,EAAlDA,YAAaC,EAAqC,EAArCA,SAAUlB,EAA2B,EAA3BA,QAASmB,EAAkB,EAAlBA,YACvDvN,EAA4BwN,YAAYN,IACxCO,EAAkB/O,EAA4B+C,GAC9CiM,EAAmBhP,EAA6BuE,GAChD0K,EAAoBjP,EAAiCoG,IAJoB,EAMjC6E,mBAAiB,IANgB,oBAMxEiE,EANwE,KAMvDC,EANuD,OAOvBlE,mBAAmB,IAPI,oBAOxEmE,EAPwE,KAOlDC,EAPkD,OAQjCpE,mBAAqB,IARY,oBAQxEqE,EARwE,KAQvDC,EARuD,OASzCtE,mBAAoB,IATqB,oBASxEuE,EATwE,KAS3DC,EAT2D,OAUrCxE,mBAAiB,IAVoB,oBAUxEyE,EAVwE,KAUzDC,EAVyD,OAW/B1E,mBAAevE,MAXgB,oBAWxEkJ,EAXwE,KAWtDC,EAXsD,OAY7B5E,mBAAevE,MAZc,oBAYxEoJ,EAZwE,KAYrDC,EAZqD,OAa/B9E,mBAAiB,IAbc,oBAaxE+E,EAbwE,KAatDC,EAbsD,KAezErE,GAAqBxL,uBAAY,SAACqB,GAAD,OAAgB2N,EAAqBtD,QAAQrK,IAAO,IAAG,CAC1F2N,IAEEc,GAAc9P,uBAChB,mBACMsP,EAAc9L,UACd0L,EAAgB1L,UAChBoM,EAAiBpM,QACnBkM,EAAkBK,WAAaP,EAAiBO,YACpD,CAACT,EAAeJ,EAAiBU,EAAkBF,EAAmBF,IAGpEQ,GAAkBhQ,uBAAY,WAChC,IAAMiQ,EHtCiB,WAC3B,IAAMC,EAAO5O,MAEb,MAAO,CAAED,GAAI6O,EAAM3O,KAAM4M,GAAQgC,KAAKC,MAAsB,GAAhBD,KAAKE,WAAiBrD,UAAU,GAAD,OAAK7M,EAAUI,QAAf,OAAwB2P,IGmC7EI,GAElBvB,EAAmBkB,EAAU5O,IAC7BgO,EAAe,GAAD,mBAAKD,GAAL,CAAkBa,OACjC,CAACb,EAAaC,EAAgBN,IAC3BwB,GAAqBvQ,uBACvB,SAACqB,GAAD,OAAgBgO,EAAe,YAAID,EAAY9K,QAAO,SAACyI,GAAD,OAAqBA,EAAO1L,KAAOA,SACzF,CAAC+N,EAAaC,IAEZmB,GAAyBxQ,uBAC3B,SAACqB,EAAYiJ,GACTA,EAAMmG,kBAENxB,EACIzD,GAAmBnK,GACb2N,EAAqB1K,QAAO,SAAAoM,GAAU,OAAIA,IAAerP,KAD/D,sBAEU2N,GAFV,CAEgC3N,OAGxC,CAAC2N,EAAsBC,EAAyBzD,KAE9CmF,GAAwB3Q,uBAC1B,SAACsK,GACG,OAAQA,EAAMsG,OAAOrP,MACjB,IAAK,WACDgO,EAAiBjF,EAAMsG,OAAOC,OAC9B,MAEJ,IAAK,cACDhB,EAAoBvF,EAAMsG,OAAOC,UAG7C,CAACtB,EAAkBM,IAEjBiB,GAA0B9Q,uBAAY,SAAC+Q,GAAD,OAAetB,EAAoBsB,KAAO,CAACtB,IACjFuB,GAA2BhR,uBAAY,SAAC+Q,GAAD,OAAepB,EAAqBoB,KAAO,CAACpB,IACnFsB,GAA8BjR,uBAAY,SAACsK,EAAYuG,GAAb,OAAmC1B,EAAmB0B,KAAQ,CAC1G1B,IAsDJ,OAnDA+B,qBAAU,WACN,GAAIzC,EAAa,CAAC,IACNlN,EAAwFkN,EAAxFlN,KAAMiL,EAAkFiC,EAAlFjC,iBAAkBC,EAAgEgC,EAAhEhC,mBAAoBN,EAA4CsC,EAA5CtC,QAASC,EAAmCqC,EAAnCrC,SAAUG,EAAyBkC,EAAzBlC,YAAaO,EAAY2B,EAAZ3B,QAEpFyC,EAAiBhO,GACjB4N,EAAmB3C,GACnByC,EAAwBxC,GACxBgD,EAAoB,IAAIlJ,KAAK4F,IAC7BwD,EAAqB,IAAIpJ,KAAK6F,IAC9ByD,EAAoBtD,GACpB8C,EAAevC,MAEpB,CAAC2B,IACJyC,qBAAU,kBAAM3C,EAAYuB,QAAgB,CAACvB,EAAauB,KAC1DoB,qBAAU,WACN,GAAI1C,EAAU,CACV,IAAM1K,EAAW,CACbvC,KAAM+N,EACN9C,iBAAkB0C,EAClBzC,mBAAoBuC,EACpB7C,QAASqD,EAAiB2B,UAC1B/E,SAAUsD,EAAkByB,UAC5B9E,UZ9GkB+E,EY8GU5B,EZ9GS6B,EY8GS3B,EZ7G1DS,KAAKmB,MAAMnB,KAAKoB,KAAK,IAAIhL,KAAK6K,GAAaD,UAAY,IAAI5K,KAAK8K,GAAcF,WAA1D,QACpB,GY6GY5E,YAAaqD,EACb9C,QAASsC,GAGbX,EAAcG,EAAiB,aAAEvN,GAAIoN,EAAYpN,IAAOyC,IAAc6K,EAAgB7K,GAEtF+K,EAAkB,CACd2C,UAAW7L,GAAW8L,YACtBC,QAAQ,iCAEZpE,IZzHqB,IAAC8D,EAAmBC,IY2H9C,CACC5C,EACAD,EACAI,EACAD,EACArB,EACAgC,EACAJ,EACAM,EACAE,EACAE,EACAR,EACAJ,EACAH,IAIA,kBAAC,KAAD,CAAyB8C,MAAOC,MAC5B,kBAACC,GAAA,EAAD,CAAMC,WAAS,EAACvK,QAAS,GACrB,kBAACsK,GAAA,EAAD,CAAMtN,MAAI,EAACwN,GAAI,IACX,kBAACC,GAAA,EAAD,CACIC,WAAS,EACT1Q,KAAK,WACLwI,QAAQ,WACRD,MACI,gDAEI,kBAAC+B,EAAA,EAAD,CAAKxD,MAAM,iBAAiBN,QAAQ,SAASmK,WAAW,kBAAxD,UAKRrB,MAAOvB,EACP6C,SAAUxB,MAGlB,kBAACkB,GAAA,EAAD,CAAMtN,MAAI,EAACwN,GAAI,IACX,kBAACK,GAAA,EAAD,CACIC,UAAQ,EACRxB,MAAO3B,EACPiD,SAAUlB,GACVqB,QAASpR,EACTqR,eAAgB,SAACC,GAAD,OAAsBA,EAAOjR,MAC7CkR,WAAY,SAACpE,EAAuBqE,GAAxB,OACRrE,EAAUlN,KAAI,SAACC,EAAmBuR,GAApB,OACV,kBAAC,GAAD,CACI/F,IAAKxL,EAAQC,GACbkI,YAAanI,EACbqI,YAAa+B,GAAmBpK,EAAQC,IACxCqI,SAAUgJ,EAAY,CAAEC,UACxBnJ,QAASgH,SAIrBoC,YAAa,SAAAC,GAAM,OACf,kBAACb,GAAA,EAAD,iBACQa,EADR,CAEI/I,MACI,wDAEI,kBAAC+B,EAAA,EAAD,CAAKxD,MAAM,iBAAiBN,QAAQ,SAASmK,WAAW,kBAAxD,UAKRnI,QAAQ,WACRkI,WAAS,UAIlB/C,EAAgB1L,QACf,kBAACqI,EAAA,EAAD,CAAKS,GAAI,GACL,kBAACP,GAAA,EAAD,CAAYhC,QAAQ,QAAQiC,UAAU,KAAtC,0CAC2C,2CAD3C,cAMZ,kBAAC6F,GAAA,EAAD,CAAMtN,MAAI,EAACwN,GAAI,GAAIe,GAAI,GACnB,kBAACC,GAAA,EAAD,CACId,WAAS,EACTe,gBAAc,EACdjJ,QAAQ,SACRkJ,aAAa,WACbnJ,MAAM,eACNpD,OAAQxG,EACR2Q,MAAOrB,EACP2C,SAAUrB,MAGlB,kBAACe,GAAA,EAAD,CAAMtN,MAAI,EAACwN,GAAI,GAAIe,GAAI,GACnB,kBAACC,GAAA,EAAD,CACId,WAAS,EACTe,gBAAc,EACdE,QAAS1D,EACTzF,QAAQ,SACRkJ,aAAa,WACbnJ,MAAM,gBACNpD,OAAQxG,EACR2Q,MAAOnB,EACPyC,SAAUnB,MAGlB,kBAACa,GAAA,EAAD,CAAMtN,MAAI,EAACwN,GAAI,IACX,kBAACC,GAAA,EAAD,CACIC,WAAS,EACTkB,WAAS,EACTC,KAAK,IACLrJ,QAAQ,WACRxI,KAAK,cACLuI,MACI,kDAEI,kBAAC+B,EAAA,EAAD,CAAKxD,MAAM,iBAAiBN,QAAQ,SAASmK,WAAW,kBAAxD,UAKRrB,MAAOjB,EACPuC,SAAUxB,MAGlB,kBAACkB,GAAA,EAAD,CAAMtN,MAAI,EAACwN,GAAI,IACX,kBAAClG,EAAA,EAAD,CAAKC,GAAI,GACL,kBAACuH,GAAA,EAAD,CACItJ,QAAQ,WACRmD,KAAK,SACL7E,MAAM,UACNmB,QAAS,kBAAMwG,MACfsD,SAAUlE,EAAY5L,OAAStD,KAA0B4O,GAEtDA,EACC,oCACI,kBAACyE,GAAA,EAAD,CAAkBrG,KAAM,KAD5B,iCAIA,oCACI,kBAACsG,GAAA,EAAD,CAASC,SAAS,UADtB,yBAMXrE,EAAYjO,KAAI,SAAC4L,GAAD,OACb,kBAAClB,EAAA,EAAD,CACI9D,QAASgF,EAAO1L,KAAOyN,EAAkB,OAAS,eAClDjC,GAAI,EACJf,GAAI,EACJc,IAAKG,EAAO1L,IAEZ,kBAACwI,GAAA,EAAD,CACIG,OACI,kBAACC,GAAA,EAAD,CACIE,IAAK4C,EAAOxL,KACZ2I,IAAK6C,EAAOC,UACZ0G,OAAQ,kBAAM3E,EAAmB,OAGzCjF,MAAOiD,EAAOxL,KACdoS,SAAU,kBAAMpD,GAAmBxD,EAAO1L,eC9R3DuS,GCWoBtK,gBAAK,YAAsC,IAAnCkB,EAAkC,EAAlCA,aAAcqJ,EAAoB,EAApBA,cAAoB,EACnChJ,oBAAkB,GADiB,oBAClEiF,EADkE,KACrDgE,EADqD,OAEnCjJ,oBAAkB,GAFiB,oBAElEkJ,EAFkE,KAErDC,EAFqD,KAInErK,EAAUhD,KAEVsN,EAAkBlR,IAAMC,GAAU6Q,GAElCK,EAAalU,uBAAY,WAC3BgU,GAAe,KAChB,CAACA,IAEJ,OACI,kBAACrI,GAAA,EAAD,CAAMtB,UAAWV,EAAQ5C,MACrB,kBAAC6E,GAAA,EAAD,CAAavB,UAAWV,EAAQlC,SAC5B,kBAACoE,EAAA,EAAD,CAAK9D,QAAQ,OAAO+D,GAAI,GACpB,kBAACC,GAAA,EAAD,CAAYhC,QAAQ,KAAKiC,UAAU,KAAK3B,UAAWV,EAAQhC,OACtDsM,EAAgB9S,KAAI,iBAAM,UAAQ+B,SAAS,cADhD,UAIJ,kBAAC,GAAD,CACIqL,YAAauF,EACbtF,SAAUuF,EACVzG,QAAS9C,EACTiE,YAAaoF,KAGrB,kBAAClH,GAAA,EAAD,MACA,kBAACf,GAAA,EAAD,CAAavB,UAAWV,EAAQ7B,QAC5B,kBAACmF,GAAA,EAAD,CAAQlD,QAAQ,WAAWmD,KAAK,QAAQ1D,QAASgB,GAAjD,SAGA,kBAACyC,GAAA,EAAD,CACIlD,QAAQ,YACRmD,KAAK,QACL7C,UAAWV,EAAQqE,WACnBsF,UAAWxD,EACXtG,QAAS0K,GALb,aC3CDC,GCae,WAC1B,IAAMxJ,EAAwB+D,YAAYnJ,IACpCL,EAAwBwJ,YAAY1J,GACpCoP,EAAuB1F,YAAYrJ,GACnCgP,EAAgBzU,EAAiCgG,IACjD0O,EAAqB1U,EAA+B6E,GACpD8P,EAAqB3U,EAAkCiF,GACvDgK,EAAoBjP,EAAiCoG,IAErDwO,EAAcxU,uBAAY,kBAAMqU,MAAiB,CAACA,IAClDI,EAAazU,uBAAY,kBAAMqU,EAActO,GAAW2O,cAAa,CAACL,IACtEM,EAAe3U,uBACjB,SAACoL,GACGkJ,EAAmBF,GACnBI,IACA3F,EAAkB,CACd2C,UAAW7L,GAAW8L,YACtBC,QAAQ,SAAD,OAAWtG,EAAX,mCAGf,CAACkJ,EAAoBF,EAAcI,EAAa3F,IAOpD,OAJAqC,qBAAU,WACNhM,IAAca,GAAW6O,MAAQL,EAAmB,MACrD,CAACrP,EAAWqP,IAGX,kBAACM,GAAA,EAAD,CACIC,MAAO,CAAEC,UAAW,QACpB/J,KAAM9F,IAAca,GAAW6O,KAC/BtH,QAASkH,EACTQ,sBAAoB,EACpBC,kBAAmBC,KACnBC,cAAe,CACXC,QAAS,MAGb,kBAACC,GAAA,EAAD,CAAMC,GAAIpQ,IAAca,GAAW6O,MAC/B,kBAAC/I,EAAA,EAAD,CAAK9D,QAAQ,OAAOC,eAAe,UAC9B9C,IAAca,GAAWwP,eACtB,kBAAC,GAAD,CACI/K,aAAcgK,EACd/J,WAAYgK,EACZ/J,aAAciK,EACdhK,eAAgBA,IAGvBzF,IAAca,GAAW2O,YACtB,kBAAC,GAAD,CAAWb,cAAelJ,EAAgBH,aAAcgK,IAE3DtP,IAAca,GAAWyP,WAAa,kBAAC,GAAD,CAAWhL,aAAcgK,QC/DvEiB,GAAa,SAACxS,GAAD,OAAqCA,EAAMyS,SCkCtD/O,GAlCGC,cAAW,SAACC,GAAD,OACzBC,aAAa,CACTC,KAAM,CACFmC,OAAQ,UACRyM,WAAY,OACZ,UAAW,CACPC,UAAW,cACX5O,UAAWH,EAAMI,QAAQ,KAGjCQ,QAAS,CACL,kBAAmB,CACfC,QAASb,EAAMU,QAAQ,EAAG,KAGlCO,OAAQ,CACJ+N,WAAYhP,EAAMyB,QAAQU,KAAK,IAC/B,kBAAmB,CACf8M,WAAYjP,EAAMU,QAAQ,GAC1BwO,cAAelP,EAAMU,QAAQ,GAC7ByO,YAAanP,EAAMU,QAAQ,GAC3B0O,aAAcpP,EAAMU,QAAQ,KAGpCgF,YAAa,CACTjF,UAAWT,EAAMU,QAAQ,GACzBC,aAAcX,EAAMU,QAAQ,IAEhC2O,SAAU,CACN7N,MAAO6F,KAAM,WC9BViI,GCae7M,gBAAK,YAAmB,IfXzB8M,EeWStS,EAAe,EAAfA,SAC5B6F,EAAUhD,KACRpF,EAA+EuC,EAA/EvC,KAAMiL,EAAyE1I,EAAzE0I,iBAAkBL,EAAuDrI,EAAvDqI,QAASC,EAA8CtI,EAA9CsI,SAAUG,EAAoCzI,EAApCyI,YAAaE,EAAuB3I,EAAvB2I,mBAE1D4J,EAAqBrW,uBAAY,SAACsW,GAAD,OAAuB7J,EAAmB8J,SAASD,KAAY,CAClG7J,IAGJ,OACI,kBAACd,GAAA,EAAD,CAAMtB,UAAWV,EAAQ5C,MACrB,kBAAC6E,GAAA,EAAD,CAAavB,UAAWV,EAAQlC,SAC5B,kBAACoE,EAAA,EAAD,CAAK9D,QAAQ,OAAOC,eAAe,gBAAgB8D,GAAI,GACnD,kBAACC,GAAA,EAAD,CAAYC,UAAU,KAAKjC,QAAQ,MAC9BxI,IAGT,kBAACsI,GAAA,EAAD,CACIoC,KAAM,kBAACC,GAAA,EAAD,MACNpC,MACI,oCACI,gCAAStD,GAAiB2F,IAD9B,MACmD,gCAAS3F,GAAiB4F,KAGjFrC,QAAQ,aAGZ,kBAACgC,GAAA,EAAD,CAAYhC,QAAQ,QAAQ1B,MAAM,gBAAgB2D,UAAU,IAAI3B,UAAWV,EAAQ4C,cfrCtE6J,EesCK7J,GfrCzBiK,MAAM,KAAKhT,OAAStD,EAAzB,UACSkW,EACEI,MAAM,KACNC,MAAM,EAAGvW,GACTwW,KAAK,KAJhB,OAKMN,IemCE,kBAACzJ,GAAA,EAAD,MACA,kBAACf,GAAA,EAAD,CAAavB,UAAWV,EAAQ7B,QAC3B0E,EAAiBiK,MAAM,EAAG,GAAGtV,KAAI,SAACC,GAAD,OAC9B,kBAACyK,EAAA,EAAD,CAAKgB,GAAI,EAAGf,GAAI,EAAG/D,QAAQ,eAAe6E,IAAKxL,EAAQC,IACnD,kBAAC,GAAD,CAAckI,YAAanI,EAASqI,YAAa4M,EAAmBjV,EAAQC,eC/CrFsV,GCYY,WACvB,IAAMvR,EAAqBsJ,YAAYvJ,GACjCyR,EAA6BlI,YAAY+G,IACzCpB,EAAgBzU,EAAiCgG,IACjD2O,EAAqB3U,EAAkCiF,GAJhC,EAMagG,mBAASzF,GANtB,oBAMtByR,EANsB,KAMPC,EANO,KAQvBC,EAAkB/W,uBACpB,SAACqB,GACGkT,EAAmBlT,GACnBgT,EAActO,GAAWwP,iBAE7B,CAAClB,EAAeE,IAWpB,OARArD,qBACI,kBACI4F,EACI1R,EAAUd,QAAO,SAAC1B,GAAD,OAAiBA,EAAKrB,KAAKyV,oBAAoBT,SAASK,EAAYK,mBAE7F,CAACH,EAAkB1R,EAAWwR,IAI9B,kBAAC/E,GAAA,EAAD,CAAMC,WAAS,EAACvK,QAAS,EAAG2P,UAAU,UACjCL,EAAcrT,OACXqT,EAAc1V,KAAI,SAAC2C,GAAD,OACd,kBAAC+N,GAAA,EAAD,CAAMtN,MAAI,EAACqI,IAAK9I,EAASzC,GAAImI,QAAS,kBAAMuN,EAAgBjT,EAASzC,MACjE,kBAAC,GAAD,CAAUyC,SAAUA,QAI5B,kBAACiI,GAAA,EAAD,CAAYhC,QAAQ,KAAKiC,UAAU,KAAKmL,MAAM,UAA9C,2B,SvB/CX9Q,K,2BAAAA,Q,KAIUA,UwBDF+Q,GAAa,SAACH,GAAD,MAAyC,CAC/DnV,KAAMuE,GAAagR,YACnBpX,QAASgX,ICHEK,GCIW,WACtB,IAAMC,EAAkB3X,EAA+BwX,IAD3B,EAGUvM,mBAAS,IAHnB,oBAGrBoM,EAHqB,KAGRO,EAHQ,KAW5B,OAJAtG,qBAAU,WACNqG,EAAgBN,KACjB,CAACA,EAAaM,IAGb,kBAAC1L,EAAA,EAAD,CAAKS,GAAI,GACL,kBAAC0F,GAAA,EAAD,CACIC,WAAS,EACTlI,QAAQ,WACRD,MAAM,iBACNgL,MAAO,CAAEe,WAAY,SACrBhF,MAAOoG,EACP9E,SAdoB,SAAC7H,GAAD,OAA0CkN,EAAelN,EAAMsG,OAAOC,YCT3F4G,GCKS,WACpB,IAAMC,EAAe9X,EAAiCgG,IAItD,OACI,kBAACiG,EAAA,EAAD,CAAK9D,QAAQ,OAAOC,eAAe,gBAAgBC,WAAW,UAC1D,kBAACgF,GAAA,EAAD,CAAQzD,QAJO,kBAAMkO,EAAa3R,GAAWyP,YAIZtI,KAAK,QAAQnD,QAAQ,YAAY1B,MAAM,WAAxE,qBCXCsP,GAAgB,SAAC1U,GAAD,OAAoCA,EAAM2U,Q,8BCSjEC,GAAajN,IAAMkN,YAAqC,SAAoBC,EAAOC,GACrF,OAAO,kBAACC,GAAA,EAAD,eAAOf,UAAU,KAAKc,IAAKA,GAASD,OCXhCG,GDca,WACxB,IAAMC,EAA2BzJ,YAAYiJ,IAEvCS,EAAoBxY,EAAiCuG,IAErDkS,EAASC,mBAAQ,kBAAMH,EAAW3G,YAAc7L,GAAW8L,cAAa,CAAC0G,IAQ/E,OANAjH,qBAAU,WACFmH,GACAE,WAAWH,EAAmB,OAEnC,CAACC,EAAQD,IAGR,kBAACvM,EAAA,EAAD,KACI,kBAAC2M,GAAA,EAAD,CACIxN,KAAMqN,EACN3G,QACI,kBAAC7F,EAAA,EAAD,CAAK9D,QAAQ,OAAOE,WAAW,UAC3B,kBAAC,KAAD,MADJ,SACyBkQ,EAAWzG,SAGxC+G,oBAAqBZ,OEpCtBa,GCWO,WAClB,IAAMC,EAAoB/Y,EAAmCa,GACvDmY,EAAgBhZ,EAA+B+D,GAOrD,OALAuN,qBAAU,WACN0H,IACAD,MACD,CAACA,EAAmBC,IAGnB,kBAAC/M,EAAA,EAAD,CAAKgN,GAAI,EAAG7M,UAAU,QAClB,kBAAC8M,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAQ1R,SAAS,QAAQgB,MAAM,WAC3B,kBAAC2Q,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAAC,GAAD,SAIZ,kBAACA,EAAA,EAAD,KACI,kBAAC,GAAD,MACA,kBAAC,GAAD,OAEJ,kBAAC,GAAD,MACA,kBAAC,GAAD,Q,6BC3BCC,GAA0B,CACnChU,UAAWa,GAAW6O,MCCbsE,GAA2B,CACpC9T,UAAW,GACX+T,UAAU,EACV7T,OAAQ,ICJC4T,GAA6B,CACtC1H,UAAW4H,GAAGxE,KACdlD,QAAS,ICJAwH,GAA8B,CACvCjC,YAAa,ICEJiC,GAAgC,CACzCG,UAAU,EACVF,UAAU,EACVjY,cAAe,ICLNoY,GAAcC,2BAAgB,CAAEtU,ILI9B,WAA+E,IAA9EhC,EAA6E,uDAA1DiW,GAA0D,yCAA1CpX,EAA0C,EAA1CA,KAAM7B,EAAoC,EAApCA,QACrD,OAAQ6B,GACJ,KAAK4B,GAASoC,kBACV,OAAO,eACA7C,EADP,CAEIiC,UAAWjF,EAAQkB,KAAI,SAAClB,GAAD,OAAkBA,KAASiD,SAAS6C,GAAW6O,QAG9E,QACI,OAAO3R,IKb+BM,MJQnC,WAAmF,IAAlFN,EAAiF,uDAA7DiW,GAA6D,yCAA7CpX,EAA6C,EAA7CA,KAAM7B,EAAuC,EAAvCA,QACtD,OAAQ6B,GACJ,KAAKtB,EAAWgE,UACZ,OAAO,eAAKvB,EAAZ,CAAmBmC,UAAU,CAAEnF,GAAH,mBAAegD,EAAMmC,YAAY+T,UAAU,IAE3E,KAAK3Y,EAAW0D,eACZ,OAAO,eAAKjB,EAAZ,CAAmBmC,UAAWnF,EAASkZ,UAAU,IAErD,KAAK3Y,EAAWsE,iBACZ,OAAO,eAAK7B,EAAZ,CAAmBqC,OAAQrF,IAE/B,KAAKO,EAAWoE,aACZ,OAAO,eAAK3B,EAAZ,CAAmBmC,UAAWnC,EAAMmC,UAAUd,QAAO,SAAA1B,GAAI,OAAIA,EAAKvB,KAAOpB,KAAUkZ,UAAU,IAEjG,KAAK3Y,EAAWuE,YACZ,OAAO,eAAK9B,EAAZ,CAAmBmC,UAAW,GAAI+T,UAAU,IAEhD,QACI,OAAOlW,II1BsCoL,UDQ1C,WAAiG,IAAhGpL,EAA+F,uDAAtEiW,GAAsE,yCAAtDpX,EAAsD,EAAtDA,KAAM7B,EAAgD,EAAhDA,QAC3D,OAAQ6B,GACJ,KAAKnC,EAAeoC,mBAChB,OAAO,eAAKkB,EAAZ,CAAmBkW,UAAU,EAAOE,UAAU,IAElD,KAAK1Z,EAAeqC,wBAChB,OAAO,eAAKiB,EAAZ,CAAmB/B,cAAejB,EAASoZ,UAAU,IAEzD,KAAK1Z,EAAesC,sBAChB,OAAO,eAAKgB,EAAZ,CAAmB/B,cAAe,GAAIiY,UAAU,IAEpD,QACI,OAAOlW,ICpBiD2U,OHMrD,WAAwF,IAAvF3U,EAAsF,uDAAhEiW,GAAgE,yCAAhDpX,EAAgD,EAAhDA,KAAM7B,EAA0C,EAA1CA,QACxD,OAAQ6B,GACJ,KAAK6D,GAAWO,WACZ,OAAO,eACAjD,EADP,GAEOhD,GAGX,KAAK0F,GAAWS,WACZ,OAAO8S,GAEX,QACI,OAAOjW,IGlByDyS,QFG7D,WAA2F,IAA1FzS,EAAyF,uDAAlEiW,GAAkE,yCAAlDpX,EAAkD,EAAlDA,KAAM7B,EAA4C,EAA5CA,QACzD,OAAQ6B,GACJ,KAAKuE,GAAagR,YACd,OAAO,eACApU,EADP,CAEIgU,YAAahX,EAAUA,EAAQ+W,oBAAsB,KAG7D,QACI,OAAO/T,MERJuW,GAFDC,uBAAYH,GAAaI,+BAAoBC,2BAAgBC,QCL3EC,IAASC,OACL,kBAAC,IAAD,CAAUN,MAAOA,IACb,kBAAC,GAAD,OAEJO,SAASC,eAAe,W","file":"static/js/main.7f09a4d4.chunk.js","sourcesContent":["enum CountriesTypes {\n    COUNTRIES_FETCHING = \"COUNTRIES_FETCHING\",\n    COUNTRIES_FETCH_SUCCESS = \"COUNTRIES_FETCH_SUCCESS\",\n    COUNTRIES_FETCH_ERROR = \"COUNTRIES_FETCH_ERROR\",\n}\n\nexport default CountriesTypes;\n","import { useCallback } from \"react\";\nimport { useDispatch as useDispatchRedux } from \"react-redux\";\n\nexport const useDispatch = <T extends Function>(action: T) => {\n    const dispatch = useDispatchRedux();\n\n    return useCallback(\n        (payload?: any) => {\n            dispatch(payload ? action(payload) : action());\n        },\n        [dispatch, action],\n    );\n};\n","export const COMMON = {\n    TRIP_SHORT_DESCRIPTION_LEN: 30,\n    FRINEDS_LIMIT: 10,\n    DATE_FORMAT: \"dd/MM/yyyy\",\n    STORE_DATA_NAME: \"trips\",\n};\n\nexport const RESOURCES = {\n    COUNTRIES: {\n        URL: \"https://restcountries-v1.p.rapidapi.com/all\",\n        HEADERS: {\n            \"x-rapidapi-host\": \"restcountries-v1.p.rapidapi.com\",\n            \"x-rapidapi-key\": \"73ffa9f418msh4131fab1abdc4e7p1caf4ajsn21c829b6943a\",\n        },\n    },\n    AVATAR: \"https://i.pravatar.cc/100?u=\",\n};\n","enum TripsTypes {\n    TRIPS_ADD = \"TRIPS_ADD\",\n    TRIPS_REMOVE = \"TRIPS_REMOVE\",\n    TRIPS_ADD_LIST = \"TRIPS_ADD_LIST\",\n    TRIPS_SET_ACTIVE = \"TRIPS_SET_ACTIVE\",\n    TRIPS_ERROR = \"TRIPS_ERROR\",\n}\n\nexport default TripsTypes;\n","import uuid from \"uuid\";\nimport { ThunkDispatch } from \"@src/types/store\";\nimport { CountriesAction } from \".\";\nimport { ICountry, ICountriesResponce } from \"@src/types/countries\";\nimport * as effects from \"./effects\";\nimport CountriesTypes from \"./types\";\n\nexport const fetchCountries = () => async (dispatch: ThunkDispatch): Promise<void> => {\n    try {\n        dispatch(isFetching());\n\n        const { data: dataList } = await effects.fetchCountries();\n        const countriesList: ICountry[] = dataList.map((country: ICountriesResponce) => ({\n            id: uuid(),\n            name: country.name,\n            code: country.alpha2Code,\n        }));\n\n        dispatch(fetchCountriesSuccess(countriesList));\n    } catch (error) {\n        dispatch(fetchCountriesError());\n        console.error(error);\n    }\n};\n\nexport const isFetching = () => ({ type: CountriesTypes.COUNTRIES_FETCHING });\n\nexport const fetchCountriesSuccess = (countriesList: ICountry[]): CountriesAction => ({\n    type: CountriesTypes.COUNTRIES_FETCH_SUCCESS,\n    payload: countriesList,\n});\n\nexport const fetchCountriesError = (): CountriesAction => ({\n    type: CountriesTypes.COUNTRIES_FETCH_ERROR,\n});\n","import axios from \"axios\";\nimport { ICountriesResponce } from \"@src/types/countries\";\nimport { RESOURCES } from \"@src/config\";\n\nexport const fetchCountries = async (): Promise<{ data: ICountriesResponce[] }> =>\n    await axios.get(RESOURCES.COUNTRIES.URL, { headers: RESOURCES.COUNTRIES.HEADERS });\n","import { Maybe } from \"true-myth\";\n\nexport const setStateItem = <T>(name: string, storeState: T): boolean => {\n    if (!localStorage) {\n        return false;\n    }\n\n    try {\n        const existingData = Maybe.of<T[]>(getState<T>(name))\n            .map((state: T[]) => state)\n            .unwrapOr([]);\n\n        const serializedState = JSON.stringify([storeState, ...existingData]);\n\n        localStorage.setItem(name, serializedState);\n        return true;\n    } catch (error) {\n        console.error(\"Store serialization failed\");\n        return false;\n    }\n};\n\nexport const setState = <T>(name: string, storeState: T[]): boolean => {\n    if (!localStorage) {\n        return false;\n    }\n\n    try {\n        if (storeState.length) {\n            const serializedState = JSON.stringify(storeState);\n\n            localStorage.setItem(name, serializedState);\n        } else {\n            removeState(name);\n        }\n\n        return true;\n    } catch (error) {\n        console.error(\"Store serialization failed\");\n        return false;\n    }\n};\n\nexport const getState = <T>(stateName: string): T[] | undefined => {\n    if (!localStorage) {\n        return;\n    }\n\n    try {\n        const serializedState = localStorage.getItem(stateName);\n\n        return JSON.parse(serializedState ? serializedState : \"[]\");\n    } catch (error) {\n        console.error(\"Store deserialization failed\");\n        return;\n    }\n};\n\nexport const removeState = (stateName: string): boolean => {\n    if (!localStorage) {\n        return false;\n    }\n\n    try {\n        localStorage.removeItem(stateName);\n        return true;\n    } catch (error) {\n        console.error(\"Store remove item failed\");\n        return false;\n    }\n};\n","import { setStateItem, setState, getState } from \"@src/utils/storage\";\nimport { COMMON } from \"@src/config\";\nimport { ITrip } from \"@src/types/trip\";\n\nexport const addTrip = (trip: ITrip): boolean => setStateItem<ITrip>(COMMON.STORE_DATA_NAME, trip);\n\nexport const addTrips = (trips: ITrip[]): boolean => setState<ITrip>(COMMON.STORE_DATA_NAME, trips);\n\nexport const removeTrip = (tripId: string): boolean => {\n    const trips = getState<ITrip>(COMMON.STORE_DATA_NAME);\n\n    return trips ? addTrips(trips.filter(trip => trip.id !== tripId)) : false;\n};\n\nexport const editTrip = (trip: ITrip): ITrip[] | undefined => {\n    let trips = getState<ITrip>(COMMON.STORE_DATA_NAME);\n\n    if (trips) {\n        const filterdTrips = trips.filter((item: ITrip) => item.id !== trip.id);\n        trips = [trip, ...filterdTrips];\n\n        addTrips(trips);\n    }\n    return trips;\n};\n\nexport const fetchTrips = (): ITrip[] | undefined => getState<ITrip>(COMMON.STORE_DATA_NAME);\n","enum AppTypes {\n    APP_TRIGGER_MODAL = \"APP_TRIGGER_MODAL\",\n}\n\nexport default AppTypes;\n","import { ThunkDispatch } from \"@src/types/store\";\nimport { TripsAction } from \".\";\nimport * as effects from \"./effects\";\nimport { ITrip } from \"@src/types/trip\";\nimport TripsTypes from \"./types\";\nimport uuid from \"uuid\";\n\nexport const fetchTrips = () => (dispatch: ThunkDispatch): void => {\n    const trips = effects.fetchTrips();\n\n    dispatch(trips ? addTripsSuccess(trips) : tripError());\n};\n\nexport const addTrip = (trip: Exclude<ITrip, \"id\">) => (dispatch: ThunkDispatch): void => {\n    const tripData = { id: uuid(), ...trip };\n    const isAdded = effects.addTrip(tripData);\n\n    dispatch(isAdded ? addTripSuccess(tripData) : tripError());\n};\n\nexport const addTripsSuccess = (tripsData: ITrip[]): TripsAction => ({\n    type: TripsTypes.TRIPS_ADD_LIST,\n    payload: tripsData,\n});\n\nexport const editTrip = (trip: ITrip) => (dispatch: ThunkDispatch): void => {\n    const withEditedItem = effects.editTrip(trip);\n\n    dispatch(withEditedItem ? addTripsSuccess(withEditedItem) : tripError());\n};\n\nexport const addTripSuccess = (tripData: ITrip): TripsAction => ({\n    type: TripsTypes.TRIPS_ADD,\n    payload: tripData,\n});\n\nexport const removeTrip = (tripId: string) => (dispatch: ThunkDispatch): void => {\n    const isRemoved = effects.removeTrip(tripId);\n\n    dispatch(isRemoved ? removeTripSuccess(tripId) : tripError());\n};\n\nexport const removeTripSuccess = (tripId: string): TripsAction => ({\n    type: TripsTypes.TRIPS_REMOVE,\n    payload: tripId,\n});\n\nexport const setActiveTrip = (tripId: string): TripsAction => ({\n    type: TripsTypes.TRIPS_SET_ACTIVE,\n    payload: tripId,\n});\n\nexport const tripError = (): TripsAction => ({\n    type: TripsTypes.TRIPS_ERROR,\n});\n","import { RootState } from \"@src/types/store\";\nimport { ModalTypes } from \"@src/types/common\";\n\nexport const getShowModal = (state: RootState): ModalTypes => state.app.showModal;\n","import { createSelector } from \"reselect\";\nimport { RootState } from \"@src/types/store\";\nimport { ITrip } from \"@src/types/trip\";\n\nexport const getTripsList = (state: RootState): ITrip[] => state.trips.tripsList;\n\nexport const getActiveTrip = (state: RootState): string => state.trips.active;\n\nexport const getActiveTripData = createSelector(\n    getTripsList,\n    getActiveTrip,\n    (list: ITrip[], id: string): ITrip => list.find((item: ITrip) => item.id === id) as ITrip,\n);\n","enum AlertTypes {\n    ALERT_SHOW = \"ALERT_SHOW\",\n    ALERT_HIDE = \"ALERT_HIDE\",\n}\n\nexport default AlertTypes;\n","import { Maybe } from \"true-myth\";\nimport { AppAction } from \".\";\nimport { ModalTypes } from \"@src/types/common\";\nimport AppTypes from \"./types\";\n\nexport const setShowModal = (modalState: ModalTypes): AppAction => ({\n    type: AppTypes.APP_TRIGGER_MODAL,\n    payload: Maybe.of(modalState),\n});\n","export enum ModalTypes {\n    MODAL_ADD = \"MODAL_ADD\",\n    MODAL_EDIT = \"MODAL_EDIT\",\n    MODAL_DETAILS = \"MODAL_DETAILS\",\n    NONE = \"NONE\",\n}\n\nexport enum AlertTypes {\n    ALERT_SHOWN = \"ALERT_SHOWN\",\n    NONE = \"NONE\",\n}\n\nexport interface IFriend {\n    id: string;\n    name: string;\n    avatarUrl: string;\n}\n","import { AlertsAction, IAlertsState } from \".\";\nimport AlertTypes from \"./types\";\n\nexport const setShowAlert = (alertPayload: IAlertsState): AlertsAction => ({\n    type: AlertTypes.ALERT_SHOW,\n    payload: alertPayload,\n});\n\nexport const setHideAlert = (): AlertsAction => ({ type: AlertTypes.ALERT_HIDE });\n","enum FiltersTypes {\n    FILTERS_SET = \"FILTERS_SET\",\n}\n\nexport default FiltersTypes;\n","import format from \"date-fns/format\";\nimport { COMMON } from \"@src/config\";\n\nexport const getTodayDate = (): Date => new Date();\n\nexport const getNextDayDate = (todayDate: Date): Date => new Date(new Date(todayDate).setDate(todayDate.getDate() + 1));\n\nexport const getDaysDifference = (startedDate: Date, finishedDate: Date): number =>\n    Math.round(Math.abs((new Date(startedDate).getTime() - new Date(finishedDate).getTime()) / (1000 * 60 * 60 * 24))) +\n    1;\n\nexport const convertTimeStamp = (stamp: number | string): string => format(new Date(stamp), COMMON.DATE_FORMAT);\n","import { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            boxShadow: theme.shadows[3],\n            maxWidth: \"80vw\",\n            width: \"1000px\",\n            outline: \"none\",\n            position: \"absolute\",\n            marginTop: theme.spacing(8),\n            marginBottom: theme.spacing(8),\n        },\n        content: {\n            \"&, &:last-child\": {\n                padding: theme.spacing(4),\n            },\n        },\n        title: {\n            textTransform: \"uppercase\",\n            margin: theme.spacing(1, 0),\n        },\n        footer: {\n            \"&, &:last-child\": {\n                padding: theme.spacing(2, 4),\n            },\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n        },\n        popover: {\n            padding: theme.spacing(2),\n        },\n        editIcon: {\n            \"& > svg\": {\n                marginRight: theme.spacing(2),\n            },\n            color: theme.palette.primary.main,\n        },\n        deleteIcon: {\n            \"& > svg\": {\n                marginRight: theme.spacing(2),\n            },\n            color: theme.palette.secondary.dark,\n        },\n        marginRight: {\n            marginRight: theme.spacing(2),\n        },\n        divider: {\n            flexGrow: 1,\n            marginLeft: theme.spacing(2),\n        },\n    }),\n);\n\nexport default useStyles;\n","import { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            border: `1px solid ${theme.palette.grey[400]}`,\n        },\n        chipWrapper: {\n            \"& > .MuiChip-root\": {\n                cursor: \"pointer\",\n            },\n        },\n        avatarImage: {\n            height: \"160%\",\n        },\n    }),\n);\n\nexport default useStyles;\n","import CountryBadge from \"./CountryBadge\";\n\nexport default CountryBadge;\n","import React, { memo, MouseEvent } from \"react\";\nimport { ICountry } from \"@src/types/countries\";\nimport { getFlagUrlByCode } from \"@src/utils/common\";\nimport useStyles from \"./styles\";\n\nimport { Chip, Avatar } from \"@material-ui/core\";\n\ninterface Props {\n    countryData: ICountry;\n    isTransited: boolean;\n    tagProps?: any;\n    onClick?: (id: string, event: MouseEvent) => void;\n}\n\nconst CountryBadge: React.FC<Props> = memo(({ countryData, onClick, isTransited, tagProps }) => {\n    const classes = useStyles();\n\n    const renderChip = (): JSX.Element => (\n        <Chip\n            label={isTransited ? countryData.name : <strong>{countryData.name}</strong>}\n            variant={isTransited ? \"outlined\" : \"default\"}\n            classes={{ root: classes.root }}\n            avatar={\n                <Avatar\n                    src={getFlagUrlByCode(countryData.code)}\n                    alt={countryData.name}\n                    classes={{ img: classes.avatarImage }}\n                />\n            }\n            {...tagProps}\n        />\n    );\n\n    return (\n        <>\n            {onClick ? (\n                <span className={classes.chipWrapper} onClick={(event: MouseEvent) => onClick(countryData.id, event)}>\n                    {renderChip()}\n                </span>\n            ) : (\n                renderChip()\n            )}\n        </>\n    );\n});\n\nexport default CountryBadge;\n","import { COMMON } from \"@src/config\";\n\nexport const getFlagUrlByCode = (code: string): string => `https://www.countryflags.io/${code}/flat/64.png`;\n\nexport const cutLargeText = (text: string): string =>\n    text.split(\" \").length > COMMON.TRIP_SHORT_DESCRIPTION_LEN\n        ? `${text\n              .split(\" \")\n              .slice(0, COMMON.TRIP_SHORT_DESCRIPTION_LEN)\n              .join(\" \")}...`\n        : text;\n","import DetailsModal from \"./DetailsModal\";\n\nexport default DetailsModal;\n","import React, { memo, useCallback, MouseEvent, Fragment } from \"react\";\nimport { Maybe } from \"true-myth\";\nimport { ITrip } from \"@src/types/trip\";\nimport { IFriend } from \"@src/types/common\";\nimport { ICountry } from \"@src/types/countries\";\nimport { convertTimeStamp } from \"@src/utils/dates\";\nimport useStyles from \"./styles\";\n\nimport {\n    Card,\n    CardContent,\n    Box,\n    Chip,\n    Typography,\n    Divider,\n    Button,\n    IconButton,\n    Popover,\n    List,\n    ListItem,\n    Avatar,\n} from \"@material-ui/core\";\nimport {\n    QueryBuilder as QueryBuilderIcon,\n    MoreVert as MoreVertIcon,\n    Edit as EditIcon,\n    Delete as DeleteIcon,\n} from \"@material-ui/icons\";\nimport CountryBadge from \"@src/components/CountryBadge\";\n\ninterface Props {\n    activeTripData: ITrip | null;\n    onCloseModal: () => void;\n    onEditTrip: () => void;\n    onDeleteTrip: (tripName: string) => void;\n}\n\nconst DetailsModal: React.FC<Props> = memo(({ onCloseModal, onEditTrip, onDeleteTrip, activeTripData }) => {\n    const [anchorEl, setAnchorEl] = React.useState<HTMLButtonElement | null>(null);\n    const open = Boolean(anchorEl);\n\n    const classes = useStyles();\n\n    const handleEditClick = useCallback(() => {\n        onEditTrip();\n        setAnchorEl(null);\n    }, [onEditTrip, setAnchorEl]);\n\n    const handleDeleteClick = useCallback(\n        (tripName: string) => {\n            onDeleteTrip(tripName);\n            setAnchorEl(null);\n        },\n        [onDeleteTrip, setAnchorEl],\n    );\n\n    const handleOpenPopover = useCallback(\n        (event: MouseEvent<HTMLButtonElement>) => {\n            setAnchorEl(event.currentTarget);\n        },\n        [setAnchorEl],\n    );\n    const handleClosePopover = useCallback(() => {\n        setAnchorEl(null);\n    }, [setAnchorEl]);\n\n    const isCountryTransited = (transited: string[], id: string) => transited.indexOf(id) > -1;\n    const daysPluration = (duration: number) => (duration > 1 ? `${duration} days` : `${duration} day`);\n\n    return (\n        <Card className={classes.root}>\n            {Maybe.of<ITrip>(activeTripData)\n                .map((data: ITrip) => (\n                    <>\n                        <CardContent className={classes.content}>\n                            <Box display=\"flex\" mb={3}>\n                                <Typography variant=\"h5\" component=\"h2\" className={classes.title}>\n                                    {data.name}\n                                </Typography>\n                            </Box>\n\n                            <Box mb={4} display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n                                <Chip\n                                    className={classes.marginRight}\n                                    icon={<QueryBuilderIcon />}\n                                    label={\n                                        <>\n                                            <strong>{convertTimeStamp(data.started)}</strong>\n                                            <> - </>\n                                            <strong>{convertTimeStamp(data.finished)}</strong>\n                                        </>\n                                    }\n                                    variant=\"outlined\"\n                                />\n                                <Typography variant=\"body1\" component=\"p\">\n                                    <strong>Duration:</strong> {daysPluration(data.duration)}\n                                </Typography>\n                            </Box>\n\n                            <Box my={4}>\n                                <Typography variant=\"body1\" component=\"p\">\n                                    {data.description}\n                                </Typography>\n                            </Box>\n\n                            {data.visitedCountries.length > data.transitedCountries.length && (\n                                <Box mt={4}>\n                                    <Box display=\"flex\" alignItems=\"center\" mb={3}>\n                                        <Typography variant=\"h6\" component=\"h3\">\n                                            Visited countries\n                                        </Typography>\n                                        <Divider className={classes.divider} />\n                                    </Box>\n\n                                    {data.visitedCountries.map((country: ICountry) => (\n                                        <Fragment key={country.id}>\n                                            {!isCountryTransited(data.transitedCountries, country.id) && (\n                                                <Box display=\"inline-block\" mr={1} mb={1}>\n                                                    <CountryBadge countryData={country} isTransited={false} />\n                                                </Box>\n                                            )}\n                                        </Fragment>\n                                    ))}\n                                </Box>\n                            )}\n\n                            {!!data.transitedCountries.length && (\n                                <Box mt={4}>\n                                    <Box display=\"flex\" alignItems=\"center\" mb={3}>\n                                        <Typography variant=\"h6\" component=\"h3\">\n                                            Transites countries\n                                        </Typography>\n                                        <Divider className={classes.divider} />\n                                    </Box>\n\n                                    {data.visitedCountries.map((country: ICountry) => (\n                                        <Fragment key={country.id}>\n                                            {isCountryTransited(data.transitedCountries, country.id) && (\n                                                <Box display=\"inline-block\" mr={1} mb={1}>\n                                                    <CountryBadge countryData={country} isTransited={true} />\n                                                </Box>\n                                            )}\n                                        </Fragment>\n                                    ))}\n                                </Box>\n                            )}\n\n                            {!!data.friends.length && (\n                                <Box mt={4}>\n                                    <Box display=\"flex\" alignItems=\"center\" mb={3}>\n                                        <Typography variant=\"h6\" component=\"h3\">\n                                            Friends list\n                                        </Typography>\n                                        <Divider className={classes.divider} />\n                                    </Box>\n\n                                    {data.friends.map((friend: IFriend) => (\n                                        <Box display=\"inline-block\" mr={1} mb={1} key={friend.id}>\n                                            <Chip\n                                                avatar={<Avatar alt={friend.name} src={friend.avatarUrl} />}\n                                                label={friend.name}\n                                            />\n                                        </Box>\n                                    ))}\n                                </Box>\n                            )}\n                        </CardContent>\n                        <Divider />\n                        <CardContent className={classes.footer}>\n                            <Button variant=\"outlined\" onClick={onCloseModal} size=\"large\">\n                                Close\n                            </Button>\n                            <IconButton color=\"primary\" onClick={handleOpenPopover}>\n                                <MoreVertIcon />\n                            </IconButton>\n                            <Popover\n                                open={open}\n                                anchorEl={anchorEl}\n                                onClose={handleClosePopover}\n                                anchorOrigin={{\n                                    vertical: \"bottom\",\n                                    horizontal: \"right\",\n                                }}\n                                className={classes.popover}\n                                transformOrigin={{\n                                    vertical: \"top\",\n                                    horizontal: \"right\",\n                                }}\n                            >\n                                <List>\n                                    <ListItem button className={classes.editIcon} onClick={handleEditClick}>\n                                        <EditIcon /> Eidt\n                                    </ListItem>\n                                    <ListItem\n                                        button\n                                        className={classes.deleteIcon}\n                                        onClick={() => handleDeleteClick(data.name)}\n                                    >\n                                        <DeleteIcon /> Delete\n                                    </ListItem>\n                                </List>\n                            </Popover>\n                        </CardContent>\n                    </>\n                ))\n                .unwrapOr(\n                    <Typography variant=\"h5\" component=\"h2\" className={classes.title}>\n                        No any data!\n                    </Typography>,\n                )}\n        </Card>\n    );\n});\n\nexport default DetailsModal;\n","import { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport { green } from \"@material-ui/core/colors\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            boxShadow: theme.shadows[3],\n            maxWidth: \"80vw\",\n            width: \"1000px\",\n            outline: \"none\",\n            position: \"absolute\",\n            marginTop: theme.spacing(8),\n            marginBottom: theme.spacing(8),\n        },\n        title: {\n            textTransform: \"uppercase\",\n            margin: theme.spacing(1, 0),\n        },\n        content: {\n            \"&, &:last-child\": {\n                padding: theme.spacing(4),\n            },\n        },\n        saveButton: {\n            backgroundColor: green[500],\n            color: \"white\",\n            \"&:hover\": {\n                backgroundColor: green[600],\n            },\n        },\n        footer: {\n            \"&, &:last-child\": {\n                padding: theme.spacing(2, 4),\n            },\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n        },\n    }),\n);\n\nexport default useStyles;\n","import uuid from \"uuid\";\nimport { RESOURCES } from \"@src/config\";\nimport { IFriend } from \"@src/types/common\";\n\nexport const Friends = [\n    \"Evan Sullivan\",\n    \"Arnold Perry\",\n    \"Monica Fowler\",\n    \"Cindy Harvey\",\n    \"Zoey Carter\",\n    \"Manuel Hill\",\n    \"Roy Walters\",\n    \"Andy Robertson\",\n    \"Felix Ferguson\",\n    \"Bryan Miles\",\n];\n\nexport const getRandomFriend = (): IFriend => {\n    const uuId = uuid();\n\n    return { id: uuId, name: Friends[Math.floor(Math.random() * 10)], avatarUrl: `${RESOURCES.AVATAR}${uuId}` };\n};\n","import { RootState } from \"@src/types/store\";\nimport { ICountry } from \"@src/types/countries\";\n\nexport const getCountriesList = (state: RootState): ICountry[] => state.countries.countriesList;\n\nexport const getFetchStatus = (state: RootState): boolean => state.countries.fetching;\n\nexport const getErrorStatus = (state: RootState): boolean => state.countries.hasError;\n","import Form from \"./Form\";\n\nexport default Form;\n","import React, { useState, useCallback, useEffect, ChangeEvent, MouseEvent } from \"react\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport { useSelector } from \"react-redux\";\nimport { useDispatch } from \"@src/hooks/dispatch\";\nimport { getRandomFriend } from \"@src/utils/friends\";\nimport { getTodayDate, getDaysDifference } from \"@src/utils/dates\";\nimport { IFriend, AlertTypes } from \"@src/types/common\";\nimport { ICountry } from \"@src/types/countries\";\nimport { ITrip } from \"@src/types/trip\";\nimport { getCountriesList } from \"@src/store/countries/selectors\";\nimport { addTrip, editTrip } from \"@src/store/trips/actions\";\nimport { setShowAlert } from \"@src/store/alerts/actions\";\nimport { COMMON } from \"@src/config\";\n\nimport { Autocomplete } from \"@material-ui/lab\";\nimport { TextField, Avatar, Grid, Box, Chip, Fab, Typography, CircularProgress } from \"@material-ui/core\";\nimport { Add as AddIcon } from \"@material-ui/icons\";\nimport { MuiPickersUtilsProvider, DatePicker } from \"@material-ui/pickers\";\nimport CountryBadge from \"@src/components/CountryBadge\";\n\ninterface Props {\n    saveForm: boolean;\n    onFormValid: (state: boolean) => void;\n    onClose: () => void;\n    initialData?: ITrip;\n}\n\nconst Form: React.FC<Props> = ({ onFormValid, saveForm, onClose, initialData }) => {\n    const countriesList: ICountry[] = useSelector(getCountriesList);\n    const dispatchAddTrip = useDispatch<typeof addTrip>(addTrip);\n    const dispatchEditTrip = useDispatch<typeof editTrip>(editTrip);\n    const dispatchShowAlert = useDispatch<typeof setShowAlert>(setShowAlert);\n\n    const [loadingFriendId, setLoadingFriendId] = useState<string>(\"\");\n    const [transitedCountriesId, setTransitedCountriesId] = useState<string[]>([]);\n    const [chosenCountries, setChosenCountries] = useState<ICountry[]>([]);\n    const [friendsList, setFriendsList] = useState<IFriend[]>([]);\n    const [tripNameValue, setTripNameValue] = useState<string>(\"\");\n    const [startedDateValue, setStartedDateValue] = useState<Date>(getTodayDate());\n    const [finishedDateValue, setFinishedDateValue] = useState<Date>(getTodayDate());\n    const [descriptionValue, setDescriptionValue] = useState<string>(\"\");\n\n    const isCountryTransited = useCallback((id: string) => transitedCountriesId.indexOf(id) > -1, [\n        transitedCountriesId,\n    ]);\n    const isFormValid = useCallback(\n        () =>\n            !!tripNameValue.length &&\n            !!chosenCountries.length &&\n            !!descriptionValue.length &&\n            finishedDateValue.getDate() >= startedDateValue.getDate(),\n        [tripNameValue, chosenCountries, descriptionValue, finishedDateValue, startedDateValue],\n    );\n\n    const handleAddFriend = useCallback(() => {\n        const newFriend = getRandomFriend();\n\n        setLoadingFriendId(newFriend.id);\n        setFriendsList([...friendsList, newFriend]);\n    }, [friendsList, setFriendsList, setLoadingFriendId]);\n    const handleDeleteFriend = useCallback(\n        (id: string) => setFriendsList([...friendsList.filter((friend: IFriend) => friend.id !== id)]),\n        [friendsList, setFriendsList],\n    );\n    const handleTransitedTrigger = useCallback(\n        (id: string, event: MouseEvent) => {\n            event.stopPropagation();\n\n            setTransitedCountriesId(\n                isCountryTransited(id)\n                    ? transitedCountriesId.filter(filteredId => filteredId !== id)\n                    : [...transitedCountriesId, id],\n            );\n        },\n        [transitedCountriesId, setTransitedCountriesId, isCountryTransited],\n    );\n    const handleTextFieldChange = useCallback(\n        (event: ChangeEvent<HTMLInputElement>) => {\n            switch (event.target.name) {\n                case \"tripName\":\n                    setTripNameValue(event.target.value);\n                    break;\n\n                case \"description\":\n                    setDescriptionValue(event.target.value);\n            }\n        },\n        [setTripNameValue, setDescriptionValue],\n    );\n    const handleChangeStartedDate = useCallback((date: any) => setStartedDateValue(date), [setStartedDateValue]);\n    const handleChangeFinishedDate = useCallback((date: any) => setFinishedDateValue(date), [setFinishedDateValue]);\n    const handleChangeChosenCountries = useCallback((event: any, value: ICountry[]) => setChosenCountries(value), [\n        setChosenCountries,\n    ]);\n\n    useEffect(() => {\n        if (initialData) {\n            const { name, visitedCountries, transitedCountries, started, finished, description, friends } = initialData;\n\n            setTripNameValue(name);\n            setChosenCountries(visitedCountries);\n            setTransitedCountriesId(transitedCountries);\n            setStartedDateValue(new Date(started));\n            setFinishedDateValue(new Date(finished));\n            setDescriptionValue(description);\n            setFriendsList(friends);\n        }\n    }, [initialData]);\n    useEffect(() => onFormValid(isFormValid()), [onFormValid, isFormValid]);\n    useEffect(() => {\n        if (saveForm) {\n            const tripData = {\n                name: tripNameValue,\n                visitedCountries: chosenCountries,\n                transitedCountries: transitedCountriesId,\n                started: startedDateValue.getTime(),\n                finished: finishedDateValue.getTime(),\n                duration: getDaysDifference(startedDateValue, finishedDateValue),\n                description: descriptionValue,\n                friends: friendsList,\n            };\n\n            initialData ? dispatchEditTrip({ id: initialData.id, ...tripData }) : dispatchAddTrip(tripData);\n\n            dispatchShowAlert({\n                showAlert: AlertTypes.ALERT_SHOWN,\n                message: `Trip was successfully saved!`,\n            });\n            onClose();\n        }\n    }, [\n        initialData,\n        saveForm,\n        dispatchEditTrip,\n        dispatchAddTrip,\n        onClose,\n        tripNameValue,\n        chosenCountries,\n        startedDateValue,\n        finishedDateValue,\n        descriptionValue,\n        friendsList,\n        transitedCountriesId,\n        dispatchShowAlert,\n    ]);\n\n    return (\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <Grid container spacing={4}>\n                <Grid item xs={12}>\n                    <TextField\n                        fullWidth\n                        name=\"tripName\"\n                        variant=\"outlined\"\n                        label={\n                            <>\n                                Trip name\n                                <Box color=\"secondary.main\" display=\"inline\" fontWeight=\"fontWeightBold\">\n                                    &nbsp;*\n                                </Box>\n                            </>\n                        }\n                        value={tripNameValue}\n                        onChange={handleTextFieldChange}\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <Autocomplete\n                        multiple\n                        value={chosenCountries}\n                        onChange={handleChangeChosenCountries}\n                        options={countriesList}\n                        getOptionLabel={(option: ICountry) => option.name}\n                        renderTags={(countries: ICountry[], getTagProps) =>\n                            countries.map((country: ICountry, index: number) => (\n                                <CountryBadge\n                                    key={country.id}\n                                    countryData={country}\n                                    isTransited={isCountryTransited(country.id)}\n                                    tagProps={getTagProps({ index })}\n                                    onClick={handleTransitedTrigger}\n                                />\n                            ))\n                        }\n                        renderInput={params => (\n                            <TextField\n                                {...params}\n                                label={\n                                    <>\n                                        Visited countries\n                                        <Box color=\"secondary.main\" display=\"inline\" fontWeight=\"fontWeightBold\">\n                                            &nbsp;*\n                                        </Box>\n                                    </>\n                                }\n                                variant=\"outlined\"\n                                fullWidth\n                            />\n                        )}\n                    />\n                    {!!chosenCountries.length && (\n                        <Box my={1}>\n                            <Typography variant=\"body2\" component=\"p\">\n                                Click to country badge for changing to <strong>Transit</strong> status!\n                            </Typography>\n                        </Box>\n                    )}\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <DatePicker\n                        fullWidth\n                        disableToolbar\n                        variant=\"inline\"\n                        inputVariant=\"outlined\"\n                        label=\"Started Date\"\n                        format={COMMON.DATE_FORMAT}\n                        value={startedDateValue}\n                        onChange={handleChangeStartedDate}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <DatePicker\n                        fullWidth\n                        disableToolbar\n                        minDate={startedDateValue}\n                        variant=\"inline\"\n                        inputVariant=\"outlined\"\n                        label=\"Finished Date\"\n                        format={COMMON.DATE_FORMAT}\n                        value={finishedDateValue}\n                        onChange={handleChangeFinishedDate}\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <TextField\n                        fullWidth\n                        multiline\n                        rows=\"4\"\n                        variant=\"outlined\"\n                        name=\"description\"\n                        label={\n                            <>\n                                Description\n                                <Box color=\"secondary.main\" display=\"inline\" fontWeight=\"fontWeightBold\">\n                                    &nbsp;*\n                                </Box>\n                            </>\n                        }\n                        value={descriptionValue}\n                        onChange={handleTextFieldChange}\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <Box mb={2}>\n                        <Fab\n                            variant=\"extended\"\n                            size=\"medium\"\n                            color=\"primary\"\n                            onClick={() => handleAddFriend()}\n                            disabled={friendsList.length > COMMON.FRINEDS_LIMIT || !!loadingFriendId}\n                        >\n                            {!!loadingFriendId ? (\n                                <>\n                                    <CircularProgress size={20} /> &nbsp; Waiting for response...\n                                </>\n                            ) : (\n                                <>\n                                    <AddIcon fontSize=\"small\" /> &nbsp; Invite friend\n                                </>\n                            )}\n                        </Fab>\n                    </Box>\n                    {friendsList.map((friend: IFriend) => (\n                        <Box\n                            display={friend.id === loadingFriendId ? \"none\" : \"inline-block\"}\n                            mr={1}\n                            mb={1}\n                            key={friend.id}\n                        >\n                            <Chip\n                                avatar={\n                                    <Avatar\n                                        alt={friend.name}\n                                        src={friend.avatarUrl}\n                                        onLoad={() => setLoadingFriendId(\"\")}\n                                    />\n                                }\n                                label={friend.name}\n                                onDelete={() => handleDeleteFriend(friend.id)}\n                            />\n                        </Box>\n                    ))}\n                </Grid>\n            </Grid>\n        </MuiPickersUtilsProvider>\n    );\n};\n\nexport default Form;\n","import FormModal from \"./FormModal\";\n\nexport default FormModal;\n","import React, { memo, useState, useCallback } from \"react\";\nimport { ITrip } from \"@src/types/trip\";\nimport { Maybe } from \"true-myth\";\nimport useStyles from \"./styles\";\n\nimport { Card, CardContent, Button, Divider, Box, Typography } from \"@material-ui/core\";\nimport Form from \"@src/containers/Form\";\n\ninterface Props {\n    onCloseModal: () => void;\n    editModalData?: ITrip;\n}\n\nconst FormModal: React.FC<Props> = memo(({ onCloseModal, editModalData }) => {\n    const [isFormValid, setIsFormValid] = useState<boolean>(false);\n    const [hasSaveForm, setHasSaveForm] = useState<boolean>(false);\n\n    const classes = useStyles();\n\n    const isEditModalType = Maybe.of<ITrip>(editModalData);\n\n    const handleSave = useCallback(() => {\n        setHasSaveForm(true);\n    }, [setHasSaveForm]);\n\n    return (\n        <Card className={classes.root}>\n            <CardContent className={classes.content}>\n                <Box display=\"flex\" mb={3}>\n                    <Typography variant=\"h5\" component=\"h2\" className={classes.title}>\n                        {isEditModalType.map(() => \"Edit\").unwrapOr(\"Create new\")} trip\n                    </Typography>\n                </Box>\n                <Form\n                    onFormValid={setIsFormValid}\n                    saveForm={hasSaveForm}\n                    onClose={onCloseModal}\n                    initialData={editModalData}\n                />\n            </CardContent>\n            <Divider />\n            <CardContent className={classes.footer}>\n                <Button variant=\"outlined\" size=\"large\" onClick={onCloseModal}>\n                    Close\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    size=\"large\"\n                    className={classes.saveButton}\n                    disabled={!isFormValid}\n                    onClick={handleSave}\n                >\n                    Save\n                </Button>\n            </CardContent>\n        </Card>\n    );\n});\n\nexport default FormModal;\n","import MasterModal from \"./MasterModal\";\n\nexport default MasterModal;\n","import React, { useCallback, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useDispatch } from \"@src/hooks/dispatch\";\nimport { getShowModal } from \"@src/store/app/selectors\";\nimport { ITrip } from \"@src/types/trip\";\nimport { getActiveTrip, getActiveTripData } from \"@src/store/trips/selectors\";\nimport { setShowModal } from \"@src/store/app/actions\";\nimport { setShowAlert } from \"@src/store/alerts/actions\";\nimport { removeTrip, setActiveTrip } from \"@src/store/trips/actions\";\nimport { ModalTypes, AlertTypes } from \"@src/types/common\";\n\nimport { Backdrop, Box, Modal, Fade } from \"@material-ui/core\";\nimport DetailsModal from \"@src/components/DetailsModal\";\nimport FormModal from \"@src/components/FormModal\";\n\nconst MasterModal: React.FC = () => {\n    const activeTripData: ITrip = useSelector(getActiveTripData);\n    const showModal: ModalTypes = useSelector(getShowModal);\n    const activeTripId: string = useSelector(getActiveTrip);\n    const dispatchModal = useDispatch<typeof setShowModal>(setShowModal);\n    const dispatchRemoveTrip = useDispatch<typeof removeTrip>(removeTrip);\n    const dispatchActiveTrip = useDispatch<typeof setActiveTrip>(setActiveTrip);\n    const dispatchShowAlert = useDispatch<typeof setShowAlert>(setShowAlert);\n\n    const handleClose = useCallback(() => dispatchModal(), [dispatchModal]);\n    const handleEdit = useCallback(() => dispatchModal(ModalTypes.MODAL_EDIT), [dispatchModal]);\n    const handleDelete = useCallback(\n        (tripName: string) => {\n            dispatchRemoveTrip(activeTripId);\n            handleClose();\n            dispatchShowAlert({\n                showAlert: AlertTypes.ALERT_SHOWN,\n                message: `Trip \"${tripName}\" was successfully deleted!`,\n            });\n        },\n        [dispatchRemoveTrip, activeTripId, handleClose, dispatchShowAlert],\n    );\n\n    useEffect(() => {\n        showModal === ModalTypes.NONE && dispatchActiveTrip(\"\");\n    }, [showModal, dispatchActiveTrip]);\n\n    return (\n        <Modal\n            style={{ overflowY: \"auto\" }}\n            open={showModal !== ModalTypes.NONE}\n            onClose={handleClose}\n            closeAfterTransition\n            BackdropComponent={Backdrop}\n            BackdropProps={{\n                timeout: 300,\n            }}\n        >\n            <Fade in={showModal !== ModalTypes.NONE}>\n                <Box display=\"flex\" justifyContent=\"center\">\n                    {showModal === ModalTypes.MODAL_DETAILS && (\n                        <DetailsModal\n                            onCloseModal={handleClose}\n                            onEditTrip={handleEdit}\n                            onDeleteTrip={handleDelete}\n                            activeTripData={activeTripData}\n                        />\n                    )}\n                    {showModal === ModalTypes.MODAL_EDIT && (\n                        <FormModal editModalData={activeTripData} onCloseModal={handleClose} />\n                    )}\n                    {showModal === ModalTypes.MODAL_ADD && <FormModal onCloseModal={handleClose} />}\n                </Box>\n            </Fade>\n        </Modal>\n    );\n};\n\nexport default MasterModal;\n","import { IFiltersState } from \".\";\nimport { RootState } from \"@src/types/store\";\n\nexport const getFilters = (state: RootState): IFiltersState => state.filters;\n","import { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport { green } from \"@material-ui/core/colors\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            cursor: \"pointer\",\n            transition: \"0.3s\",\n            \"&:hover\": {\n                transform: \"scale(1.01)\",\n                boxShadow: theme.shadows[3],\n            },\n        },\n        content: {\n            \"&, &:last-child\": {\n                padding: theme.spacing(3, 4),\n            },\n        },\n        footer: {\n            background: theme.palette.grey[50],\n            \"&, &:last-child\": {\n                paddingTop: theme.spacing(2),\n                paddingBottom: theme.spacing(1),\n                paddingLeft: theme.spacing(4),\n                paddingRight: theme.spacing(4),\n            },\n        },\n        description: {\n            marginTop: theme.spacing(2),\n            marginBottom: theme.spacing(1),\n        },\n        chipTick: {\n            color: green[500],\n        },\n    }),\n);\n\nexport default useStyles;\n","import TripItem from \"./TripItem\";\n\nexport default TripItem;\n","import React, { memo, useCallback } from \"react\";\nimport { ITrip } from \"@src/types/trip\";\nimport { ICountry } from \"@src/types/countries\";\nimport { convertTimeStamp } from \"@src/utils/dates\";\nimport { cutLargeText } from \"@src/utils/common\";\nimport useStyles from \"./styles\";\n\nimport { QueryBuilder as QueryBuilderIcon } from \"@material-ui/icons\";\nimport { Card, CardContent, Typography, Divider, Chip, Box } from \"@material-ui/core\";\nimport CountryBadge from \"@src/components/CountryBadge\";\n\ninterface Props {\n    tripData: ITrip;\n}\n\nconst Trip: React.FC<Props> = memo(({ tripData }) => {\n    const classes = useStyles();\n    const { name, visitedCountries, started, finished, description, transitedCountries } = tripData;\n\n    const isTransitedCountry = useCallback((countryId: string) => transitedCountries.includes(countryId), [\n        transitedCountries,\n    ]);\n\n    return (\n        <Card className={classes.root}>\n            <CardContent className={classes.content}>\n                <Box display=\"flex\" justifyContent=\"space-between\" mb={2}>\n                    <Typography component=\"h2\" variant=\"h4\">\n                        {name}\n                    </Typography>\n                </Box>\n                <Chip\n                    icon={<QueryBuilderIcon />}\n                    label={\n                        <>\n                            <strong>{convertTimeStamp(started)}</strong> - <strong>{convertTimeStamp(finished)}</strong>\n                        </>\n                    }\n                    variant=\"outlined\"\n                />\n\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\" className={classes.description}>\n                    {cutLargeText(description)}\n                </Typography>\n            </CardContent>\n            <Divider />\n            <CardContent className={classes.footer}>\n                {visitedCountries.slice(0, 8).map((country: ICountry) => (\n                    <Box mr={1} mb={1} display=\"inline-block\" key={country.id}>\n                        <CountryBadge countryData={country} isTransited={isTransitedCountry(country.id)} />\n                    </Box>\n                ))}\n            </CardContent>\n        </Card>\n    );\n});\n\nexport default Trip;\n","import TripList from \"./TripList\";\n\nexport default TripList;\n","import React, { useCallback, useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useDispatch } from \"@src/hooks/dispatch\";\nimport { getFilters } from \"@src/store/filters/selectors\";\nimport { IFiltersState } from \"@src/store/filters\";\nimport { setShowModal } from \"@src/store/app/actions\";\nimport { setActiveTrip } from \"@src/store/trips/actions\";\nimport { getTripsList } from \"@src/store/trips/selectors\";\nimport { ModalTypes } from \"@src/types/common\";\nimport { ITrip } from \"@src/types/trip\";\n\nimport { Grid, Typography } from \"@material-ui/core\";\nimport TripItem from \"@src/components/TripItem\";\n\nconst TripList: React.FC = () => {\n    const tripsList: ITrip[] = useSelector(getTripsList);\n    const filtersData: IFiltersState = useSelector(getFilters);\n    const dispatchModal = useDispatch<typeof setShowModal>(setShowModal);\n    const dispatchActiveTrip = useDispatch<typeof setActiveTrip>(setActiveTrip);\n\n    const [filteredTrips, setFilteredTrips] = useState(tripsList);\n\n    const handleTripClick = useCallback(\n        (id: string) => {\n            dispatchActiveTrip(id);\n            dispatchModal(ModalTypes.MODAL_DETAILS);\n        },\n        [dispatchModal, dispatchActiveTrip],\n    );\n\n    useEffect(\n        () =>\n            setFilteredTrips(\n                tripsList.filter((trip: ITrip) => trip.name.toLocaleLowerCase().includes(filtersData.queryString)),\n            ),\n        [setFilteredTrips, tripsList, filtersData],\n    );\n\n    return (\n        <Grid container spacing={2} direction=\"column\">\n            {filteredTrips.length ? (\n                filteredTrips.map((tripData: ITrip) => (\n                    <Grid item key={tripData.id} onClick={() => handleTripClick(tripData.id)}>\n                        <TripItem tripData={tripData} />\n                    </Grid>\n                ))\n            ) : (\n                <Typography variant=\"h5\" component=\"h3\" align=\"center\">\n                    No data for showing!\n                </Typography>\n            )}\n        </Grid>\n    );\n};\n\nexport default TripList;\n","import { FiltersAction } from \".\";\nimport FiltersTypes from \"./types\";\n\nexport const setFilters = (queryString: string): FiltersAction => ({\n    type: FiltersTypes.FILTERS_SET,\n    payload: queryString,\n});\n","import Filters from \"./Filters\";\n\nexport default Filters;\n","import React, { useEffect, useState, ChangeEvent } from \"react\";\nimport { useDispatch } from \"@src/hooks/dispatch\";\nimport { setFilters } from \"@src/store/filters/actions\";\n\nimport { TextField, Box } from \"@material-ui/core\";\n\nconst Filters: React.FC = () => {\n    const dispatchFilters = useDispatch<typeof setFilters>(setFilters);\n\n    const [queryString, setQueryString] = useState(\"\");\n\n    const handleQueryStringChange = (event: ChangeEvent<HTMLInputElement>) => setQueryString(event.target.value);\n\n    useEffect(() => {\n        dispatchFilters(queryString);\n    }, [queryString, dispatchFilters]);\n\n    return (\n        <Box my={6}>\n            <TextField\n                fullWidth\n                variant=\"outlined\"\n                label=\"Filter by name\"\n                style={{ background: \"white\" }}\n                value={queryString}\n                onChange={handleQueryStringChange}\n            />\n        </Box>\n    );\n};\n\nexport default Filters;\n","import Panel from \"./Panel\";\n\nexport default Panel;\n","import React from \"react\";\nimport { useDispatch } from \"@src/hooks/dispatch\";\nimport { setShowModal } from \"@src/store/app/actions\";\nimport { ModalTypes } from \"@src/types/common\";\n\nimport { Button, Box } from \"@material-ui/core\";\n\nconst Panel: React.FC = () => {\n    const triggerModal = useDispatch<typeof setShowModal>(setShowModal);\n\n    const handleAddClick = () => triggerModal(ModalTypes.MODAL_ADD);\n\n    return (\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n            <Button onClick={handleAddClick} size=\"large\" variant=\"contained\" color=\"primary\">\n                Create new trip\n            </Button>\n        </Box>\n    );\n};\n\nexport default Panel;\n","import { IAlertsState } from \".\";\nimport { RootState } from \"@src/types/store\";\n\nexport const getAlertState = (state: RootState): IAlertsState => state.alerts;\n","import React, { useEffect, useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useDispatch } from \"@src/hooks/dispatch\";\nimport { IAlertsState } from \"@src/store/alerts\";\nimport { setHideAlert } from \"@src/store/alerts/actions\";\nimport { getAlertState } from \"@src/store/alerts/selectors\";\nimport { AlertTypes } from \"@src/types/common\";\n\nimport { Box, Snackbar, Slide } from \"@material-ui/core\";\nimport { TransitionProps } from \"@material-ui/core/transitions\";\nimport { Done as IconDone } from \"@material-ui/icons\";\n\nconst Transition = React.forwardRef<unknown, TransitionProps>(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nconst Snacksbar: React.FC = () => {\n    const alertState: IAlertsState = useSelector(getAlertState);\n\n    const dispatchHideAlert = useDispatch<typeof setHideAlert>(setHideAlert);\n\n    const isOpen = useMemo(() => alertState.showAlert === AlertTypes.ALERT_SHOWN, [alertState]);\n\n    useEffect(() => {\n        if (isOpen) {\n            setTimeout(dispatchHideAlert, 3000);\n        }\n    }, [isOpen, dispatchHideAlert]);\n\n    return (\n        <Box>\n            <Snackbar\n                open={isOpen}\n                message={\n                    <Box display=\"flex\" alignItems=\"center\">\n                        <IconDone /> &nbsp; {alertState.message}\n                    </Box>\n                }\n                TransitionComponent={Transition}\n            />\n        </Box>\n    );\n};\n\nexport default Snacksbar;\n","import Snacksbar from \"./Snacksbar\";\n\nexport default Snacksbar;\n","import App from \"./App\";\n\nexport default App;\n","import React, { useEffect } from \"react\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { useDispatch } from \"@src/hooks/dispatch\";\nimport { fetchCountries } from \"@src/store/countries/actions\";\nimport { fetchTrips } from \"@src/store/trips/actions\";\n\nimport { Container, Box, AppBar, Toolbar } from \"@material-ui/core\";\nimport MasterModal from \"@src/containers/MasterModal\";\nimport TripList from \"@src/containers/TripList\";\nimport Filters from \"@src/containers/Filters\";\nimport Panel from \"@src/containers/Panel\";\nimport Snacksbar from \"@src/containers/Snacksbar\";\n\nconst App: React.FC = () => {\n    const dispatchCountries = useDispatch<typeof fetchCountries>(fetchCountries);\n    const dispatchTrips = useDispatch<typeof fetchTrips>(fetchTrips);\n\n    useEffect(() => {\n        dispatchTrips();\n        dispatchCountries();\n    }, [dispatchCountries, dispatchTrips]);\n\n    return (\n        <Box py={8} component=\"main\">\n            <CssBaseline />\n            <AppBar position=\"fixed\" color=\"inherit\">\n                <Toolbar>\n                    <Container>\n                        <Panel />\n                    </Container>\n                </Toolbar>\n            </AppBar>\n            <Container>\n                <Filters />\n                <TripList />\n            </Container>\n            <MasterModal />\n            <Snacksbar />\n        </Box>\n    );\n};\n\nexport default App;\n","import { IAction } from \"@src/types/store\";\nimport { ModalTypes } from \"@src/types/common\";\nimport AppTypes from \"./types\";\n\ninterface IAppState {\n    showModal: ModalTypes;\n}\n\nexport type AppAction = IAction<keyof typeof AppTypes, any>;\n\nexport const initialState: IAppState = {\n    showModal: ModalTypes.NONE,\n};\n\nexport default (state: IAppState = initialState, { type, payload }: AppAction): IAppState => {\n    switch (type) {\n        case AppTypes.APP_TRIGGER_MODAL:\n            return {\n                ...state,\n                showModal: payload.map((payload: any) => payload).unwrapOr(ModalTypes.NONE),\n            };\n\n        default:\n            return state;\n    }\n};\n","import { IAction } from \"@src/types/store\";\nimport { ITrip } from \"@src/types/trip\";\nimport TripsTypes from \"./types\";\n\ninterface TripsState {\n    tripsList: ITrip[];\n    hasError: boolean;\n    active: string;\n}\n\nexport type TripsAction = IAction<keyof typeof TripsTypes, any>;\n\nexport const initialState: TripsState = {\n    tripsList: [],\n    hasError: false,\n    active: \"\",\n};\n\nexport default (state: TripsState = initialState, { type, payload }: TripsAction): TripsState => {\n    switch (type) {\n        case TripsTypes.TRIPS_ADD:\n            return { ...state, tripsList: [payload, ...state.tripsList], hasError: false };\n\n        case TripsTypes.TRIPS_ADD_LIST:\n            return { ...state, tripsList: payload, hasError: false };\n\n        case TripsTypes.TRIPS_SET_ACTIVE:\n            return { ...state, active: payload };\n\n        case TripsTypes.TRIPS_REMOVE:\n            return { ...state, tripsList: state.tripsList.filter(trip => trip.id !== payload), hasError: false };\n\n        case TripsTypes.TRIPS_ERROR:\n            return { ...state, tripsList: [], hasError: true };\n\n        default:\n            return state;\n    }\n};\n","import { IAction } from \"@src/types/store\";\nimport { AlertTypes as AT } from \"@src/types/common\";\nimport AlertTypes from \"./types\";\n\nexport interface IAlertsState {\n    showAlert: AT;\n    message: string;\n}\n\nexport type AlertsAction = IAction<keyof typeof AlertTypes, any>;\n\nexport const initialState: IAlertsState = {\n    showAlert: AT.NONE,\n    message: \"\",\n};\n\nexport default (state: IAlertsState = initialState, { type, payload }: AlertsAction): IAlertsState => {\n    switch (type) {\n        case AlertTypes.ALERT_SHOW:\n            return {\n                ...state,\n                ...payload,\n            };\n\n        case AlertTypes.ALERT_HIDE:\n            return initialState;\n\n        default:\n            return state;\n    }\n};\n","import { IAction } from \"@src/types/store\";\nimport FiltersTypes from \"./types\";\n\nexport interface IFiltersState {\n    queryString: string;\n}\n\nexport type FiltersAction = IAction<keyof typeof FiltersTypes, any>;\n\nexport const initialState: IFiltersState = {\n    queryString: \"\",\n};\n\nexport default (state: IFiltersState = initialState, { type, payload }: FiltersAction): IFiltersState => {\n    switch (type) {\n        case FiltersTypes.FILTERS_SET:\n            return {\n                ...state,\n                queryString: payload ? payload.toLocaleLowerCase() : \"\",\n            };\n\n        default:\n            return state;\n    }\n};\n","import { IAction } from \"@src/types/store\";\nimport { ICountry } from \"@src/types/countries\";\nimport CountriesTypes from \"./types\";\n\ninterface ICountriesState {\n    fetching: boolean;\n    hasError: boolean;\n    countriesList: ICountry[];\n}\n\nexport type CountriesAction = IAction<keyof typeof CountriesTypes, any>;\n\nexport const initialState: ICountriesState = {\n    fetching: false,\n    hasError: false,\n    countriesList: [],\n};\n\nexport default (state: ICountriesState = initialState, { type, payload }: CountriesAction): ICountriesState => {\n    switch (type) {\n        case CountriesTypes.COUNTRIES_FETCHING:\n            return { ...state, hasError: false, fetching: true };\n\n        case CountriesTypes.COUNTRIES_FETCH_SUCCESS:\n            return { ...state, countriesList: payload, fetching: false };\n\n        case CountriesTypes.COUNTRIES_FETCH_ERROR:\n            return { ...state, countriesList: [], hasError: true };\n\n        default:\n            return state;\n    }\n};\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\n\nimport app from \"./app\";\nimport trips from \"./trips\";\nimport alerts from \"./alerts\";\nimport filters from \"./filters\";\nimport countries from \"./countries\";\n\nexport const rootReducer = combineReducers({ app, trips, countries, alerts, filters });\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport App from \"@src/containers/App\";\nimport store from \"@src/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}